import 'package:cloud_firestore/cloud_firestore.dart';
import '../utils/enhanced_logger.dart';
import '../utils/unified_profile_search.dart';

/// Debug espec√≠fico para encontrar o perfil "Itala"
class DebugItalaSearch {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Debug completo da busca por "Itala"
  static Future<void> debugItalaSearch() async {
    print('\nüîç DEBUG: Procurando perfil "Itala"');
    print('=' * 60);

    try {
      // 1. Verificar se existe na cole√ß√£o usuarios
      await _debugUsuariosCollection();
      
      // 2. Verificar se existe na cole√ß√£o spiritual_profiles
      await _debugSpiritualProfilesCollection();
      
      // 3. Testar busca unificada com logs detalhados
      await _debugUnifiedSearch();
      
      // 4. Testar filtro de texto isoladamente
      await _debugTextFilter();

    } catch (e) {
      print('‚ùå ERRO NO DEBUG: $e');
    }
  }

  /// Debug da cole√ß√£o usuarios
  static Future<void> _debugUsuariosCollection() async {
    print('\nüìä 1. DEBUG: Cole√ß√£o "usuarios"');
    print('-' * 40);

    try {
      // Buscar todos os usu√°rios
      final snapshot = await _firestore
          .collection('usuarios')
          .limit(20)
          .get();

      print('‚úÖ Total de usu√°rios encontrados: ${snapshot.docs.length}');
      
      // Procurar por "Itala" especificamente
      bool italaFound = false;
      for (final doc in snapshot.docs) {
        final data = doc.data();
        final nome = data['nome'] as String? ?? '';
        
        print('   - ${doc.id}: ${nome}');
        
        if (nome.toLowerCase().contains('itala')) {
          italaFound = true;
          print('   üéØ ENCONTROU ITALA!');
          print('   üìã Dados completos:');
          print('      ‚Ä¢ ID: ${doc.id}');
          print('      ‚Ä¢ Nome: ${nome}');
          print('      ‚Ä¢ Username: ${data['username'] ?? 'N/A'}');
          print('      ‚Ä¢ Email: ${data['email'] ?? 'N/A'}');
          print('      ‚Ä¢ Cidade: ${data['cidade'] ?? 'N/A'}');
          print('      ‚Ä¢ Estado: ${data['estado'] ?? 'N/A'}');
          print('      ‚Ä¢ IsActive: ${data['isActive'] ?? 'N/A'}');
          print('      ‚Ä¢ Foto: ${data['foto'] ?? 'N/A'}');
        }
      }
      
      if (!italaFound) {
        print('‚ùå Perfil "Itala" N√ÉO encontrado na cole√ß√£o usuarios');
      }

    } catch (e) {
      print('‚ùå Erro ao buscar na cole√ß√£o usuarios: $e');
    }
  }

  /// Debug da cole√ß√£o spiritual_profiles
  static Future<void> _debugSpiritualProfilesCollection() async {
    print('\nüìä 2. DEBUG: Cole√ß√£o "spiritual_profiles"');
    print('-' * 40);

    try {
      final snapshot = await _firestore
          .collection('spiritual_profiles')
          .limit(20)
          .get();

      print('‚úÖ Total de perfis espirituais: ${snapshot.docs.length}');
      
      bool italaFound = false;
      for (final doc in snapshot.docs) {
        final data = doc.data();
        final displayName = data['displayName'] as String? ?? '';
        
        print('   - ${doc.id}: ${displayName}');
        
        if (displayName.toLowerCase().contains('itala')) {
          italaFound = true;
          print('   üéØ ENCONTROU ITALA em spiritual_profiles!');
          print('   üìã Dados: ${data}');
        }
      }
      
      if (!italaFound) {
        print('‚ùå Perfil "Itala" N√ÉO encontrado na cole√ß√£o spiritual_profiles');
      }

    } catch (e) {
      print('‚ùå Erro ao buscar na cole√ß√£o spiritual_profiles: $e');
    }
  }

  /// Debug da busca unificada
  static Future<void> _debugUnifiedSearch() async {
    print('\nüìä 3. DEBUG: Busca Unificada');
    print('-' * 40);

    try {
      print('üîç Testando busca unificada por "itala"...');
      
      final results = await UnifiedProfileSearch.searchAllProfiles(
        query: 'itala',
        limit: 50,
      );
      
      print('‚úÖ Resultados da busca unificada: ${results.length}');
      
      if (results.isEmpty) {
        print('‚ùå NENHUM resultado para "itala"');
        
        // Testar sem query para ver todos os perfis
        print('\nüîç Testando busca SEM filtro de texto...');
        final allResults = await UnifiedProfileSearch.searchAllProfiles(
          query: null,
          limit: 50,
        );
        
        print('‚úÖ Total de perfis sem filtro: ${allResults.length}');
        
        // Procurar "Itala" manualmente nos resultados
        for (final profile in allResults) {
          final name = profile.displayName ?? '';
          if (name.toLowerCase().contains('itala')) {
            print('üéØ ENCONTROU ITALA nos resultados sem filtro!');
            print('   üìã Nome: ${name}');
            print('   üìã Tipo: ${profile.profileType ?? 'spiritual'}');
            print('   üìã Keywords: ${profile.searchKeywords ?? []}');
            print('   üìã Bio: ${profile.bio ?? 'N/A'}');
            print('   üìã Cidade: ${profile.city ?? 'N/A'}');
          }
        }
      } else {
        for (final profile in results) {
          print('   ‚úÖ ${profile.displayName} (${profile.profileType ?? 'spiritual'})');
        }
      }

    } catch (e) {
      print('‚ùå Erro na busca unificada: $e');
    }
  }

  /// Debug do filtro de texto
  static Future<void> _debugTextFilter() async {
    print('\nüìä 4. DEBUG: Filtro de Texto');
    print('-' * 40);

    try {
      // Simular o filtro de texto com dados de teste
      print('üîç Testando filtro de texto com dados simulados...');
      
      // Criar perfil de teste que simula "Itala"
      final testProfile = {
        'displayName': 'Itala',
        'bio': 'Perfil de vitrine de prop√≥sito',
        'city': 'S√£o Paulo',
        'state': 'SP',
        'searchKeywords': ['itala', 's√£o', 'paulo', 'sp'],
      };
      
      final searchableText = [
        testProfile['displayName'] ?? '',
        testProfile['bio'] ?? '',
        testProfile['city'] ?? '',
        testProfile['state'] ?? '',
        ...(testProfile['searchKeywords'] as List<String>? ?? []),
      ].join(' ').toLowerCase();
      
      print('üìã Texto pesquis√°vel: "$searchableText"');
      
      // Testar diferentes queries
      final queries = ['itala', 'ital', 'ita', 'it'];
      
      for (final query in queries) {
        final queryLower = query.toLowerCase();
        final matches = searchableText.contains(queryLower);
        
        print('   üîç Query "$query" ‚Üí ${matches ? '‚úÖ MATCH' : '‚ùå NO MATCH'}');
      }

    } catch (e) {
      print('‚ùå Erro no debug do filtro: $e');
    }
  }

  /// Executa debug completo e retorna informa√ß√µes
  static Future<Map<String, dynamic>> getDebugInfo() async {
    final info = <String, dynamic>{};
    
    try {
      // Contar usu√°rios
      final usuariosSnapshot = await _firestore
          .collection('usuarios')
          .limit(50)
          .get();
      
      info['totalUsuarios'] = usuariosSnapshot.docs.length;
      info['usuariosComItala'] = usuariosSnapshot.docs
          .where((doc) => (doc.data()['nome'] as String? ?? '')
              .toLowerCase()
              .contains('itala'))
          .length;
      
      // Contar perfis espirituais
      final spiritualSnapshot = await _firestore
          .collection('spiritual_profiles')
          .limit(50)
          .get();
      
      info['totalSpiritual'] = spiritualSnapshot.docs.length;
      info['spiritualComItala'] = spiritualSnapshot.docs
          .where((doc) => (doc.data()['displayName'] as String? ?? '')
              .toLowerCase()
              .contains('itala'))
          .length;
      
      // Testar busca unificada
      final unifiedResults = await UnifiedProfileSearch.searchAllProfiles(
        query: 'itala',
        limit: 50,
      );
      
      info['buscaUnificadaResultados'] = unifiedResults.length;
      info['buscaUnificadaComItala'] = unifiedResults
          .where((profile) => (profile.displayName ?? '')
              .toLowerCase()
              .contains('itala'))
          .length;

    } catch (e) {
      info['erro'] = e.toString();
    }
    
    return info;
  }
}