import 'package:flutter/material.dart';
import '../services/location_data_provider.dart';
import '../utils/world_locations_data.dart';

/// Utilit√°rio para testar o novo sistema de localiza√ß√£o mundial
class TestWorldLocationSystem {
  /// Testa todos os pa√≠ses implementados
  static void testAllImplementedCountries() {
    debugPrint('üåç TESTANDO SISTEMA DE LOCALIZA√á√ÉO MUNDIAL');
    debugPrint('=' * 50);
    
    final implementedCountries = [
      'Brasil',
      'Estados Unidos', 
      'Portugal',
      'Canad√°'
    ];
    
    for (final country in implementedCountries) {
      _testCountry(country);
      debugPrint('');
    }
    
    // Testar pa√≠ses sem dados estruturados
    _testCountryWithoutData('Fran√ßa');
    _testCountryWithoutData('Jap√£o');
  }
  
  static void _testCountry(String countryName) {
    debugPrint('üè≥Ô∏è Testando: $countryName');
    
    // Obter c√≥digo do pa√≠s
    final countryCode = WorldLocationsData.getCountryCode(countryName);
    debugPrint('   C√≥digo: $countryCode');
    
    if (countryCode == null) {
      debugPrint('   ‚ùå C√≥digo n√£o encontrado!');
      return;
    }
    
    // Verificar se tem dados estruturados
    final hasStructuredData = LocationDataProvider.hasStructuredData(countryCode);
    debugPrint('   Dados estruturados: ${hasStructuredData ? "‚úÖ Sim" : "‚ùå N√£o"}');
    
    if (!hasStructuredData) {
      return;
    }
    
    // Obter dados de localiza√ß√£o
    final locationData = LocationDataProvider.getLocationData(countryCode);
    if (locationData == null) {
      debugPrint('   ‚ùå Erro ao obter dados de localiza√ß√£o!');
      return;
    }
    
    debugPrint('   Label de estado: ${locationData.stateLabel}');
    debugPrint('   Usa siglas: ${locationData.useStateAbbreviation ? "Sim" : "N√£o"}');
    
    // Obter estados
    final states = locationData.getStates();
    debugPrint('   Estados/Prov√≠ncias: ${states.length}');
    
    if (states.isNotEmpty) {
      // Testar primeiro estado
      final firstState = states.first;
      debugPrint('   Primeiro estado: $firstState');
      
      // Obter cidades do primeiro estado
      final cities = locationData.getCitiesForState(firstState);
      debugPrint('   Cidades em $firstState: ${cities.length}');
      
      if (cities.isNotEmpty) {
        // Testar formata√ß√£o
        final firstCity = cities.first;
        final formatted = locationData.formatLocation(firstCity, firstState);
        debugPrint('   Exemplo formatado: $formatted');
        
        // Testar sigla se aplic√°vel
        if (locationData.useStateAbbreviation) {
          final abbr = locationData.getStateAbbreviation(firstState);
          debugPrint('   Sigla de $firstState: $abbr');
        }
      }
    }
  }
  
  static void _testCountryWithoutData(String countryName) {
    debugPrint('üè≥Ô∏è Testando pa√≠s sem dados: $countryName');
    
    final countryCode = WorldLocationsData.getCountryCode(countryName);
    debugPrint('   C√≥digo: ${countryCode ?? "N√£o mapeado"}');
    
    if (countryCode != null) {
      final hasStructuredData = LocationDataProvider.hasStructuredData(countryCode);
      debugPrint('   Dados estruturados: ${hasStructuredData ? "‚úÖ Sim" : "‚ùå N√£o (esperado)"}');
    } else {
      debugPrint('   ‚úÖ Ser√° usado campo de texto livre');
    }
    
    debugPrint('');
  }
  
  /// Testa cen√°rios espec√≠ficos de uso
  static void testUsageScenarios() {
    debugPrint('üß™ TESTANDO CEN√ÅRIOS DE USO');
    debugPrint('=' * 50);
    
    // Cen√°rio 1: Usu√°rio brasileiro
    debugPrint('Cen√°rio 1: Usu√°rio brasileiro');
    _simulateUserFlow('Brasil', 'S√£o Paulo', 'Campinas');
    
    // Cen√°rio 2: Usu√°rio americano
    debugPrint('Cen√°rio 2: Usu√°rio americano');
    _simulateUserFlow('Estados Unidos', 'California', 'Los Angeles');
    
    // Cen√°rio 3: Usu√°rio portugu√™s
    debugPrint('Cen√°rio 3: Usu√°rio portugu√™s');
    _simulateUserFlow('Portugal', 'Lisboa', 'Lisboa');
    
    // Cen√°rio 4: Usu√°rio de pa√≠s sem dados estruturados
    debugPrint('Cen√°rio 4: Usu√°rio franc√™s (sem dados estruturados)');
    _simulateUserFlowFreeText('Fran√ßa', 'Paris');
  }
  
  static void _simulateUserFlow(String country, String state, String city) {
    final countryCode = WorldLocationsData.getCountryCode(country);
    if (countryCode == null) {
      debugPrint('   ‚ùå Pa√≠s n√£o mapeado');
      return;
    }
    
    final locationData = LocationDataProvider.getLocationData(countryCode);
    if (locationData == null) {
      debugPrint('   ‚ùå Dados n√£o encontrados');
      return;
    }
    
    debugPrint('   1. Selecionou pa√≠s: $country');
    debugPrint('   2. Label de estado: ${locationData.stateLabel}');
    debugPrint('   3. Selecionou ${locationData.stateLabel.toLowerCase()}: $state');
    debugPrint('   4. Selecionou cidade: $city');
    
    final formatted = locationData.formatLocation(city, state);
    debugPrint('   ‚úÖ Resultado final: $formatted');
    debugPrint('');
  }
  
  static void _simulateUserFlowFreeText(String country, String city) {
    debugPrint('   1. Selecionou pa√≠s: $country');
    debugPrint('   2. Campo de texto livre aparece');
    debugPrint('   3. Digitou cidade: $city');
    debugPrint('   ‚úÖ Resultado final: $city, $country');
    debugPrint('');
  }
  
  /// Testa performance do sistema
  static void testPerformance() {
    debugPrint('‚ö° TESTANDO PERFORMANCE');
    debugPrint('=' * 50);
    
    final stopwatch = Stopwatch()..start();
    
    // Testar carregamento de todos os pa√≠ses
    final countries = WorldLocationsData.getCountryNames();
    debugPrint('Pa√≠ses dispon√≠veis: ${countries.length}');
    
    // Testar carregamento de dados estruturados
    int structuredCount = 0;
    for (final country in countries) {
      final code = WorldLocationsData.getCountryCode(country);
      if (code != null && LocationDataProvider.hasStructuredData(code)) {
        structuredCount++;
      }
    }
    
    stopwatch.stop();
    
    debugPrint('Pa√≠ses com dados estruturados: $structuredCount');
    debugPrint('Tempo de execu√ß√£o: ${stopwatch.elapsedMilliseconds}ms');
    debugPrint('');
  }
}
