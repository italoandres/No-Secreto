import 'package:cloud_firestore/cloud_firestore.dart';

/// Script para corrigir notifica√ß√µes de interesse com fromUserName vazio
/// 
/// Uso:
/// 1. Importe este arquivo onde precisar
/// 2. Chame: await fixEmptyFromUserName();
/// 3. Verifique os logs no console
Future<void> fixEmptyFromUserName() async {
  final firestore = FirebaseFirestore.instance;
  
  print('üîß [FIX] Iniciando corre√ß√£o de fromUserName vazio...');
  
  try {
    // Buscar TODAS as notifica√ß√µes (n√£o podemos filtrar por string vazia diretamente)
    final notifications = await firestore
        .collection('interest_notifications')
        .get();
    
    print('üìä [FIX] Total de notifica√ß√µes encontradas: ${notifications.docs.length}');
    
    int fixed = 0;
    int skipped = 0;
    int errors = 0;
    
    for (var doc in notifications.docs) {
      try {
        final data = doc.data();
        final fromUserName = data['fromUserName'] as String?;
        final fromUserId = data['fromUserId'] as String?;
        
        // Pular se j√° tem nome ou n√£o tem userId
        if (fromUserName != null && fromUserName.trim().isNotEmpty) {
          skipped++;
          continue;
        }
        
        if (fromUserId == null || fromUserId.isEmpty) {
          print('‚ö†Ô∏è [FIX] Notifica√ß√£o ${doc.id} sem fromUserId, pulando...');
          skipped++;
          continue;
        }
        
        print('üîç [FIX] Corrigindo notifica√ß√£o ${doc.id}...');
        print('   fromUserId: $fromUserId');
        print('   fromUserName atual: "${fromUserName ?? ""}"');
        
        // Buscar nome do usu√°rio no Firestore
        final userDoc = await firestore
            .collection('usuarios')
            .doc(fromUserId)
            .get();
        
        if (!userDoc.exists) {
          print('‚ùå [FIX] Usu√°rio n√£o encontrado: $fromUserId');
          errors++;
          continue;
        }
        
        final userData = userDoc.data()!;
        final userName = userData['nome'] ?? userData['username'] ?? 'Usu√°rio';
        
        if (userName.isEmpty || userName == 'Usu√°rio') {
          print('‚ö†Ô∏è [FIX] Nome do usu√°rio est√° vazio ou gen√©rico: "$userName"');
        }
        
        // Atualizar notifica√ß√£o
        await doc.reference.update({
          'fromUserName': userName,
        });
        
        print('‚úÖ [FIX] Notifica√ß√£o ${doc.id} atualizada!');
        print('   Novo fromUserName: "$userName"');
        fixed++;
        
      } catch (e) {
        print('‚ùå [FIX] Erro ao processar notifica√ß√£o ${doc.id}: $e');
        errors++;
      }
    }
    
    print('');
    print('üéâ [FIX] Corre√ß√£o conclu√≠da!');
    print('   ‚úÖ Corrigidas: $fixed');
    print('   ‚è≠Ô∏è Puladas: $skipped');
    print('   ‚ùå Erros: $errors');
    
  } catch (e) {
    print('‚ùå [FIX] Erro fatal: $e');
    rethrow;
  }
}

/// Corrigir uma notifica√ß√£o espec√≠fica por ID
Future<void> fixSpecificNotification(String notificationId) async {
  final firestore = FirebaseFirestore.instance;
  
  print('üîß [FIX] Corrigindo notifica√ß√£o espec√≠fica: $notificationId');
  
  try {
    final doc = await firestore
        .collection('interest_notifications')
        .doc(notificationId)
        .get();
    
    if (!doc.exists) {
      print('‚ùå [FIX] Notifica√ß√£o n√£o encontrada: $notificationId');
      return;
    }
    
    final data = doc.data()!;
    final fromUserId = data['fromUserId'] as String?;
    
    if (fromUserId == null || fromUserId.isEmpty) {
      print('‚ùå [FIX] Notifica√ß√£o sem fromUserId');
      return;
    }
    
    // Buscar nome do usu√°rio
    final userDoc = await firestore
        .collection('usuarios')
        .doc(fromUserId)
        .get();
    
    if (!userDoc.exists) {
      print('‚ùå [FIX] Usu√°rio n√£o encontrado: $fromUserId');
      return;
    }
    
    final userData = userDoc.data()!;
    final userName = userData['nome'] ?? userData['username'] ?? 'Usu√°rio';
    
    // Atualizar notifica√ß√£o
    await doc.reference.update({
      'fromUserName': userName,
    });
    
    print('‚úÖ [FIX] Notifica√ß√£o atualizada!');
    print('   ID: $notificationId');
    print('   fromUserId: $fromUserId');
    print('   Novo fromUserName: "$userName"');
    
  } catch (e) {
    print('‚ùå [FIX] Erro: $e');
    rethrow;
  }
}
