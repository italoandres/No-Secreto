import 'dart:async';
import '../services/unified_notification_interface.dart';
import '../models/real_notification_model.dart';
import 'enhanced_logger.dart';

/// Utilit√°rio para testar o sistema unificado de notifica√ß√µes
class TestUnifiedNotificationSystem {
  static final UnifiedNotificationInterface _unifiedInterface = UnifiedNotificationInterface();

  /// Testa o sistema unificado para um usu√°rio
  static Future<void> testUnifiedSystem(String userId) async {
    EnhancedLogger.log('üß™ [TEST_UNIFIED] Iniciando teste do sistema unificado para: $userId');
    
    try {
      // 1. Testa stream unificado
      await _testUnifiedStream(userId);
      
      // 2. Testa cache
      await _testCache(userId);
      
      // 3. Testa sincroniza√ß√£o for√ßada
      await _testForceSync(userId);
      
      // 4. Testa resolu√ß√£o de conflitos
      await _testConflictResolution(userId);
      
      // 5. Testa valida√ß√£o de consist√™ncia
      await _testConsistencyValidation(userId);
      
      EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Todos os testes passaram para: $userId');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [TEST_UNIFIED] Erro nos testes: $e');
      rethrow;
    }
  }

  /// Testa stream unificado
  static Future<void> _testUnifiedStream(String userId) async {
    EnhancedLogger.log('üì° [TEST_UNIFIED] Testando stream unificado...');
    
    final completer = Completer<void>();
    late StreamSubscription subscription;
    
    subscription = _unifiedInterface
        .getUnifiedNotificationStream(userId)
        .timeout(const Duration(seconds: 10))
        .listen(
          (notifications) {
            EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Stream funcionando: ${notifications.length} notifica√ß√µes');
            subscription.cancel();
            completer.complete();
          },
          onError: (error) {
            EnhancedLogger.log('‚ùå [TEST_UNIFIED] Erro no stream: $error');
            subscription.cancel();
            completer.completeError(error);
          },
        );
    
    await completer.future;
  }

  /// Testa cache
  static Future<void> _testCache(String userId) async {
    EnhancedLogger.log('üì¶ [TEST_UNIFIED] Testando cache...');
    
    // Verifica se h√° cache
    final hasCache = _unifiedInterface.hasCachedData(userId);
    EnhancedLogger.log('üì¶ [TEST_UNIFIED] Cache dispon√≠vel: $hasCache');
    
    // Obt√©m dados do cache
    final cachedNotifications = _unifiedInterface.getCachedNotifications(userId);
    EnhancedLogger.log('üì¶ [TEST_UNIFIED] Notifica√ß√µes em cache: ${cachedNotifications.length}');
    
    // Testa invalida√ß√£o
    await _unifiedInterface.invalidateAndRefresh(userId);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Cache invalidado e atualizado');
  }

  /// Testa sincroniza√ß√£o for√ßada
  static Future<void> _testForceSync(String userId) async {
    EnhancedLogger.log('üöÄ [TEST_UNIFIED] Testando sincroniza√ß√£o for√ßada...');
    
    await _unifiedInterface.forceSync(userId);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Sincroniza√ß√£o for√ßada conclu√≠da');
  }

  /// Testa resolu√ß√£o de conflitos
  static Future<void> _testConflictResolution(String userId) async {
    EnhancedLogger.log('‚ö° [TEST_UNIFIED] Testando resolu√ß√£o de conflitos...');
    
    await _unifiedInterface.resolveConflicts(userId);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Conflitos resolvidos');
  }

  /// Testa valida√ß√£o de consist√™ncia
  static Future<void> _testConsistencyValidation(String userId) async {
    EnhancedLogger.log('üîç [TEST_UNIFIED] Testando valida√ß√£o de consist√™ncia...');
    
    final isConsistent = await _unifiedInterface.validateConsistency(userId);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Sistema consistente: $isConsistent');
  }

  /// Executa teste de stress
  static Future<void> stressTest(String userId, {int iterations = 10}) async {
    EnhancedLogger.log('üí™ [TEST_UNIFIED] Iniciando teste de stress com $iterations itera√ß√µes...');
    
    final futures = <Future>[];
    
    for (int i = 0; i < iterations; i++) {
      futures.add(_performStressIteration(userId, i));
    }
    
    await Future.wait(futures);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Teste de stress conclu√≠do');
  }

  /// Executa uma itera√ß√£o do teste de stress
  static Future<void> _performStressIteration(String userId, int iteration) async {
    try {
      // For√ßa sync
      await _unifiedInterface.forceSync(userId);
      
      // Obt√©m dados do cache
      _unifiedInterface.getCachedNotifications(userId);
      
      // Valida consist√™ncia
      await _unifiedInterface.validateConsistency(userId);
      
      EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Itera√ß√£o $iteration conclu√≠da');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [TEST_UNIFIED] Erro na itera√ß√£o $iteration: $e');
    }
  }

  /// Testa m√∫ltiplos usu√°rios simultaneamente
  static Future<void> testMultipleUsers(List<String> userIds) async {
    EnhancedLogger.log('üë• [TEST_UNIFIED] Testando ${userIds.length} usu√°rios simultaneamente...');
    
    final futures = userIds.map((userId) => testUnifiedSystem(userId)).toList();
    
    await Future.wait(futures);
    EnhancedLogger.log('‚úÖ [TEST_UNIFIED] Teste de m√∫ltiplos usu√°rios conclu√≠do');
  }

  /// Monitora sistema em tempo real
  static StreamSubscription monitorSystem(String userId, {Duration? duration}) {
    EnhancedLogger.log('üëÅÔ∏è [TEST_UNIFIED] Iniciando monitoramento do sistema...');
    
    final subscription = _unifiedInterface
        .getUnifiedNotificationStream(userId)
        .listen(
          (notifications) {
            final stats = _unifiedInterface.getSystemStats();
            EnhancedLogger.log('üìä [MONITOR] ${notifications.length} notifica√ß√µes | Stats: $stats');
          },
          onError: (error) {
            EnhancedLogger.log('‚ùå [MONITOR] Erro no monitoramento: $error');
          },
        );
    
    // Auto-cancela ap√≥s dura√ß√£o especificada
    if (duration != null) {
      Timer(duration, () {
        subscription.cancel();
        EnhancedLogger.log('‚è∞ [MONITOR] Monitoramento finalizado ap√≥s ${duration.inSeconds}s');
      });
    }
    
    return subscription;
  }

  /// Imprime estat√≠sticas detalhadas
  static void printDetailedStats() {
    EnhancedLogger.log('üìä [TEST_UNIFIED] Estat√≠sticas detalhadas do sistema:');
    
    final stats = _unifiedInterface.getSystemStats();
    for (final entry in stats.entries) {
      EnhancedLogger.log('  ${entry.key}: ${entry.value}');
    }
    
    _unifiedInterface.debugPrintSystemState();
  }

  /// Executa teste completo do sistema
  static Future<void> runCompleteTest(String userId) async {
    EnhancedLogger.log('üéØ [TEST_UNIFIED] Executando teste completo do sistema unificado...');
    
    try {
      // Imprime estado inicial
      printDetailedStats();
      
      // Executa testes b√°sicos
      await testUnifiedSystem(userId);
      
      // Executa teste de stress
      await stressTest(userId, iterations: 5);
      
      // Imprime estado final
      printDetailedStats();
      
      EnhancedLogger.log('üéâ [TEST_UNIFIED] Teste completo conclu√≠do com sucesso!');
      
    } catch (e) {
      EnhancedLogger.log('üí• [TEST_UNIFIED] Falha no teste completo: $e');
      rethrow;
    }
  }
}