import 'package:cloud_firestore/cloud_firestore.dart';
import 'populate_explore_profiles_test_data.dart';

/// Utilit√°rio para debug e teste do sistema Explorar Perfis
class DebugExploreProfilesSystem {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Executa diagn√≥stico completo do sistema
  static Future<void> runFullDiagnosis() async {
    print('üîç DIAGN√ìSTICO COMPLETO - Sistema Explorar Perfis');
    print('=' * 60);

    await _checkFirebaseConnection();
    await _checkCollections();
    await _checkIndexes();
    await _populateTestDataIfNeeded();
    await _testQueries();
    
    print('=' * 60);
    print('‚úÖ Diagn√≥stico completo finalizado!');
  }

  /// Verifica conex√£o com Firebase
  static Future<void> _checkFirebaseConnection() async {
    print('\nüì° Verificando conex√£o com Firebase...');
    try {
      await _firestore.collection('test').limit(1).get();
      print('‚úÖ Conex√£o com Firebase: OK');
    } catch (e) {
      print('‚ùå Erro na conex√£o com Firebase: $e');
    }
  }

  /// Verifica se as cole√ß√µes existem e t√™m dados
  static Future<void> _checkCollections() async {
    print('\nüìä Verificando cole√ß√µes...');
    
    // Verificar spiritual_profiles
    try {
      final profilesSnapshot = await _firestore
          .collection('spiritual_profiles')
          .limit(5)
          .get();
      print('‚úÖ spiritual_profiles: ${profilesSnapshot.docs.length} documentos');
      
      if (profilesSnapshot.docs.isNotEmpty) {
        final firstDoc = profilesSnapshot.docs.first.data();
        print('   üìù Campos do primeiro documento:');
        firstDoc.keys.take(5).forEach((key) {
          print('      - $key: ${firstDoc[key]}');
        });
      }
    } catch (e) {
      print('‚ùå Erro ao verificar spiritual_profiles: $e');
    }

    // Verificar profile_engagement
    try {
      final engagementSnapshot = await _firestore
          .collection('profile_engagement')
          .limit(5)
          .get();
      print('‚úÖ profile_engagement: ${engagementSnapshot.docs.length} documentos');
    } catch (e) {
      print('‚ùå Erro ao verificar profile_engagement: $e');
    }
  }

  /// Verifica status dos √≠ndices testando queries
  static Future<void> _checkIndexes() async {
    print('\nüîç Testando √≠ndices...');

    // Teste 1: Verified profiles (deve funcionar)
    try {
      final verifiedQuery = await _firestore
          .collection('spiritual_profiles')
          .where('isVerified', isEqualTo: true)
          .where('isActive', isEqualTo: true)
          .limit(5)
          .get();
      print('‚úÖ √çndice verified profiles: OK (${verifiedQuery.docs.length} resultados)');
    } catch (e) {
      print('‚ùå √çndice verified profiles: ERRO - $e');
    }

    // Teste 2: Popular profiles (viewsCount)
    try {
      final popularQuery = await _firestore
          .collection('spiritual_profiles')
          .where('hasCompletedSinaisCours–µ', isEqualTo: true)
          .where('isActive', isEqualTo: true)
          .where('isVerified', isEqualTo: true)
          .orderBy('viewsCount', descending: true)
          .limit(5)
          .get();
      print('‚úÖ √çndice popular profiles: OK (${popularQuery.docs.length} resultados)');
    } catch (e) {
      print('‚ùå √çndice popular profiles: ERRO - $e');
    }

    // Teste 3: Profile engagement
    try {
      final engagementQuery = await _firestore
          .collection('profile_engagement')
          .where('isEligibleForExploration', isEqualTo: true)
          .orderBy('engagementScore', descending: true)
          .limit(5)
          .get();
      print('‚úÖ √çndice profile engagement: OK (${engagementQuery.docs.length} resultados)');
    } catch (e) {
      print('‚ùå √çndice profile engagement: ERRO - $e');
    }

    // Teste 4: Search keywords (mais prov√°vel de falhar)
    try {
      final searchQuery = await _firestore
          .collection('spiritual_profiles')
          .where('searchKeywords', arrayContains: 'maria')
          .where('hasCompletedSinaisCours–µ', isEqualTo: true)
          .where('isActive', isEqualTo: true)
          .where('isVerified', isEqualTo: true)
          .limit(5)
          .get();
      print('‚úÖ √çndice search keywords: OK (${searchQuery.docs.length} resultados)');
    } catch (e) {
      print('‚ùå √çndice search keywords: ERRO - $e');
      print('   üîó Criar √≠ndice: https://console.firebase.google.com/...');
    }
  }

  /// Popula dados de teste se necess√°rio
  static Future<void> _populateTestDataIfNeeded() async {
    print('\nüìù Verificando dados de teste...');
    
    final exists = await PopulateExploreProfilesTestData.testDataExists();
    if (!exists) {
      print('‚ö†Ô∏è Dados de teste n√£o encontrados. Populando...');
      try {
        await PopulateExploreProfilesTestData.populateTestData();
        print('‚úÖ Dados de teste populados com sucesso!');
      } catch (e) {
        print('‚ùå Erro ao popular dados de teste: $e');
      }
    } else {
      print('‚úÖ Dados de teste j√° existem');
    }
  }

  /// Testa queries espec√≠ficas do sistema
  static Future<void> _testQueries() async {
    print('\nüß™ Testando queries do sistema...');

    // Simular busca por "maria"
    try {
      final searchResults = await _firestore
          .collection('spiritual_profiles')
          .where('searchKeywords', arrayContains: 'maria')
          .where('isActive', isEqualTo: true)
          .where('isVerified', isEqualTo: true)
          .limit(10)
          .get();
      
      print('‚úÖ Busca por "maria": ${searchResults.docs.length} resultados');
      
      if (searchResults.docs.isNotEmpty) {
        final firstResult = searchResults.docs.first.data();
        print('   üìù Primeiro resultado: ${firstResult['displayName']}');
      }
    } catch (e) {
      print('‚ùå Busca por "maria": ERRO - $e');
    }

    // Testar query de engajamento
    try {
      final engagementResults = await _firestore
          .collection('profile_engagement')
          .where('isEligibleForExploration', isEqualTo: true)
          .orderBy('engagementScore', descending: true)
          .limit(10)
          .get();
      
      print('‚úÖ Query engajamento: ${engagementResults.docs.length} resultados');
    } catch (e) {
      print('‚ùå Query engajamento: ERRO - $e');
    }
  }

  /// For√ßa recria√ß√£o dos dados de teste
  static Future<void> recreateTestData() async {
    print('üîÑ Recriando dados de teste...');
    
    try {
      // Limpar dados existentes
      await PopulateExploreProfilesTestData.clearTestData();
      print('üóëÔ∏è Dados antigos removidos');
      
      // Aguardar um pouco
      await Future.delayed(const Duration(seconds: 2));
      
      // Criar novos dados
      await PopulateExploreProfilesTestData.populateTestData();
      print('‚úÖ Novos dados criados com sucesso!');
      
    } catch (e) {
      print('‚ùå Erro ao recriar dados: $e');
    }
  }

  /// Mostra instru√ß√µes para resolver problemas
  static void showTroubleshootingInstructions() {
    print('\nüîß INSTRU√á√ïES DE RESOLU√á√ÉO DE PROBLEMAS');
    print('=' * 60);
    
    print('\n1. üìä Se "count: 0" nas queries:');
    print('   - Execute: DebugExploreProfilesSystem.recreateTestData()');
    print('   - Aguarde 1-2 minutos');
    print('   - Teste novamente');
    
    print('\n2. ‚ùå Se erro "Index required":');
    print('   - V√° para Firebase Console ‚Üí Firestore ‚Üí Indexes');
    print('   - Verifique se todos os √≠ndices est√£o "Enabled"');
    print('   - Se "Building", aguarde conclus√£o');
    
    print('\n3. üîç Para testar busca:');
    print('   - Certifique-se que dados t√™m searchKeywords');
    print('   - Teste buscar por: "maria", "jo√£o", "ana"');
    
    print('\n4. üöÄ Links dos √≠ndices:');
    print('   - Profile Engagement: [link fornecido anteriormente]');
    print('   - Popular Profiles: [link fornecido anteriormente]');
    print('   - Search Keywords: [link fornecido anteriormente]');
    
    print('\n=' * 60);
  }
}