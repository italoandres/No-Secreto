import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Ferramenta de diagn√≥stico para notifica√ß√µes de interesse
class DiagnoseInterestNotifications {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  /// Executar diagn√≥stico completo
  static Future<void> runFullDiagnosis() async {
    print('\nüîç ========== DIAGN√ìSTICO DE NOTIFICA√á√ïES ==========\n');
    
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      print('‚ùå Usu√°rio n√£o est√° logado');
      return;
    }
    
    print('üë§ Usu√°rio atual: ${currentUser.uid}');
    print('üìß Email: ${currentUser.email}\n');
    
    await _checkAllNotifications(currentUser.uid);
    await _checkFilteredNotifications(currentUser.uid);
    await _simulateFilters(currentUser.uid);
    
    print('\nüîç ========== FIM DO DIAGN√ìSTICO ==========\n');
  }
  
  /// Verificar todas as notifica√ß√µes do usu√°rio
  static Future<void> _checkAllNotifications(String userId) async {
    print('üìä 1. VERIFICANDO TODAS AS NOTIFICA√á√ïES\n');
    
    try {
      final query = await _firestore
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: userId)
          .get();
      
      print('   Total de notifica√ß√µes encontradas: ${query.docs.length}\n');
      
      if (query.docs.isEmpty) {
        print('   ‚ö†Ô∏è Nenhuma notifica√ß√£o encontrada para este usu√°rio\n');
        return;
      }
      
      for (var doc in query.docs) {
        final data = doc.data();
        print('   üìã Notifica√ß√£o ID: ${doc.id}');
        print('      - Tipo: ${data['type'] ?? 'N/A'}');
        print('      - Status: ${data['status'] ?? 'N/A'}');
        print('      - De: ${data['fromUserName'] ?? 'N/A'} (${data['fromUserId'] ?? 'N/A'})');
        print('      - Mensagem: ${data['message'] ?? 'N/A'}');
        print('      - Data: ${data['dataCriacao'] ?? 'N/A'}');
        print('');
      }
    } catch (e) {
      print('   ‚ùå Erro ao buscar notifica√ß√µes: $e\n');
    }
  }
  
  /// Verificar notifica√ß√µes ap√≥s aplicar filtros
  static Future<void> _checkFilteredNotifications(String userId) async {
    print('üîç 2. VERIFICANDO NOTIFICA√á√ïES FILTRADAS\n');
    
    try {
      final query = await _firestore
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: userId)
          .get();
      
      const validTypes = ['interest', 'acceptance', 'mutual_match'];
      const validStatuses = ['pending', 'viewed', 'new'];
      
      print('   Filtros aplicados:');
      print('   - Tipos v√°lidos: $validTypes');
      print('   - Status v√°lidos: $validStatuses\n');
      
      int passedFilter = 0;
      int failedFilter = 0;
      
      for (var doc in query.docs) {
        final data = doc.data();
        final type = data['type'] ?? 'interest';
        final status = data['status'] ?? 'pending';
        
        final isValidType = validTypes.contains(type);
        final isValidStatus = validStatuses.contains(status);
        
        if (isValidType && isValidStatus) {
          passedFilter++;
          print('   ‚úÖ PASSOU: ID=${doc.id}, type=$type, status=$status');
        } else {
          failedFilter++;
          print('   ‚ùå FALHOU: ID=${doc.id}, type=$type, status=$status');
          if (!isValidType) print('      Motivo: Tipo inv√°lido');
          if (!isValidStatus) print('      Motivo: Status inv√°lido');
        }
      }
      
      print('\n   üìä Resultado:');
      print('      - Passaram no filtro: $passedFilter');
      print('      - Falharam no filtro: $failedFilter\n');
      
    } catch (e) {
      print('   ‚ùå Erro ao filtrar notifica√ß√µes: $e\n');
    }
  }
  
  /// Simular aplica√ß√£o de diferentes filtros
  static Future<void> _simulateFilters(String userId) async {
    print('üß™ 3. SIMULANDO DIFERENTES FILTROS\n');
    
    try {
      final query = await _firestore
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: userId)
          .get();
      
      if (query.docs.isEmpty) {
        print('   ‚ö†Ô∏è Nenhuma notifica√ß√£o para simular\n');
        return;
      }
      
      // Filtro 1: Apenas pending
      final pendingOnly = query.docs.where((doc) {
        final status = doc.data()['status'] ?? 'pending';
        return status == 'pending';
      }).length;
      print('   Filtro 1 (status=pending): $pendingOnly notifica√ß√µes');
      
      // Filtro 2: Pending ou viewed
      final pendingOrViewed = query.docs.where((doc) {
        final status = doc.data()['status'] ?? 'pending';
        return status == 'pending' || status == 'viewed';
      }).length;
      print('   Filtro 2 (status=pending|viewed): $pendingOrViewed notifica√ß√µes');
      
      // Filtro 3: Pending, viewed ou new
      final allStatuses = query.docs.where((doc) {
        final status = doc.data()['status'] ?? 'pending';
        return status == 'pending' || status == 'viewed' || status == 'new';
      }).length;
      print('   Filtro 3 (status=pending|viewed|new): $allStatuses notifica√ß√µes');
      
      // Filtro 4: Tipo interest
      final interestType = query.docs.where((doc) {
        final type = doc.data()['type'] ?? 'interest';
        return type == 'interest';
      }).length;
      print('   Filtro 4 (type=interest): $interestType notifica√ß√µes');
      
      // Filtro 5: Tipo interest + status pending
      final interestPending = query.docs.where((doc) {
        final type = doc.data()['type'] ?? 'interest';
        final status = doc.data()['status'] ?? 'pending';
        return type == 'interest' && status == 'pending';
      }).length;
      print('   Filtro 5 (type=interest + status=pending): $interestPending notifica√ß√µes');
      
      // Filtro 6: Todos os tipos v√°lidos + todos os status v√°lidos
      const validTypes = ['interest', 'acceptance', 'mutual_match'];
      const validStatuses = ['pending', 'viewed', 'new'];
      final allValid = query.docs.where((doc) {
        final type = doc.data()['type'] ?? 'interest';
        final status = doc.data()['status'] ?? 'pending';
        return validTypes.contains(type) && validStatuses.contains(status);
      }).length;
      print('   Filtro 6 (todos tipos + status v√°lidos): $allValid notifica√ß√µes\n');
      
    } catch (e) {
      print('   ‚ùå Erro ao simular filtros: $e\n');
    }
  }
  
  /// Gerar relat√≥rio de diagn√≥stico
  static Future<String> generateReport() async {
    final buffer = StringBuffer();
    final currentUser = FirebaseAuth.instance.currentUser;
    
    if (currentUser == null) {
      return 'Usu√°rio n√£o est√° logado';
    }
    
    buffer.writeln('RELAT√ìRIO DE DIAGN√ìSTICO DE NOTIFICA√á√ïES');
    buffer.writeln('=' * 50);
    buffer.writeln('Usu√°rio: ${currentUser.uid}');
    buffer.writeln('Email: ${currentUser.email}');
    buffer.writeln('Data: ${DateTime.now()}');
    buffer.writeln('=' * 50);
    buffer.writeln('');
    
    try {
      final query = await _firestore
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: currentUser.uid)
          .get();
      
      buffer.writeln('Total de notifica√ß√µes: ${query.docs.length}');
      buffer.writeln('');
      
      const validTypes = ['interest', 'acceptance', 'mutual_match'];
      const validStatuses = ['pending', 'viewed', 'new'];
      
      int valid = 0;
      int invalid = 0;
      
      for (var doc in query.docs) {
        final data = doc.data();
        final type = data['type'] ?? 'interest';
        final status = data['status'] ?? 'pending';
        
        final isValid = validTypes.contains(type) && validStatuses.contains(status);
        
        if (isValid) {
          valid++;
        } else {
          invalid++;
        }
        
        buffer.writeln('Notifica√ß√£o ${doc.id}:');
        buffer.writeln('  - Tipo: $type');
        buffer.writeln('  - Status: $status');
        buffer.writeln('  - V√°lida: ${isValid ? "SIM" : "N√ÉO"}');
        buffer.writeln('');
      }
      
      buffer.writeln('=' * 50);
      buffer.writeln('RESUMO:');
      buffer.writeln('  - Notifica√ß√µes v√°lidas: $valid');
      buffer.writeln('  - Notifica√ß√µes inv√°lidas: $invalid');
      buffer.writeln('=' * 50);
      
    } catch (e) {
      buffer.writeln('ERRO: $e');
    }
    
    return buffer.toString();
  }
}
