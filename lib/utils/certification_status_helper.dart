import 'package:cloud_firestore/cloud_firestore.dart';

/// Helper para verificar status de certifica√ß√£o de forma segura
class CertificationStatusHelper {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Verifica se o usu√°rio tem certifica√ß√£o aprovada
  /// Retorna de forma segura para evitar erro INTERNAL ASSERTION FAILED
  static Future<bool> hasApprovedCertification(String userId) async {
    try {
      print('üîç Verificando certifica√ß√£o para userId: $userId');
      
      // PRIMEIRO: Verificar TODAS as certifica√ß√µes aprovadas
      final allApproved = await _firestore
          .collection('spiritual_certifications')
          .where('status', isEqualTo: 'approved')
          .get();
      
      print('üìä Total de certifica√ß√µes aprovadas no sistema: ${allApproved.docs.length}');
      
      if (allApproved.docs.isNotEmpty) {
        print('üìã Listando todas as certifica√ß√µes aprovadas:');
        for (var doc in allApproved.docs) {
          final data = doc.data();
          print('   - Doc ID: ${doc.id}');
          print('     UserId: ${data['userId']}');
          print('     Email: ${data['userEmail']}');
          print('     Status: ${data['status']}');
        }
      }
      
      // SEGUNDO: Buscar espec√≠fica do usu√°rio
      final snapshot = await _firestore
          .collection('spiritual_certifications')
          .where('userId', isEqualTo: userId)
          .where('status', isEqualTo: 'approved')
          .limit(1)
          .get();
      
      print('üìä Documentos encontrados para userId $userId: ${snapshot.docs.length}');
      
      if (snapshot.docs.isNotEmpty) {
        final doc = snapshot.docs.first;
        print('‚úÖ Certifica√ß√£o aprovada encontrada:');
        print('   - ID: ${doc.id}');
        print('   - Status: ${doc.data()['status']}');
        print('   - UserId: ${doc.data()['userId']}');
      } else {
        print('‚ö†Ô∏è Nenhuma certifica√ß√£o aprovada encontrada para este userId');
        print('üí° Dica: Verifique se o userId no Firestore est√° correto');
      }
      
      return snapshot.docs.isNotEmpty;
    } catch (e) {
      print('‚ùå Erro ao verificar certifica√ß√£o: $e');
      return false; // Em caso de erro, retorna false
    }
  }

  /// Retorna o status da certifica√ß√£o para exibi√ß√£o
  /// - "Aprovado" se certifica√ß√£o aprovada
  /// - "Destaque seu Perfil" caso contr√°rio
  static Future<String> getCertificationDisplayStatus(String userId) async {
    try {
      final hasApproved = await hasApprovedCertification(userId);
      return hasApproved ? 'Aprovado' : 'Destaque seu Perfil';
    } catch (e) {
      print('‚ùå Erro ao obter status: $e');
      return 'Destaque seu Perfil';
    }
  }

  /// Verifica se o usu√°rio tem certifica√ß√£o pendente
  static Future<bool> hasPendingCertification(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('spiritual_certifications')
          .where('userId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .limit(1)
          .get();
      
      return snapshot.docs.isNotEmpty;
    } catch (e) {
      print('‚ùå Erro ao verificar certifica√ß√£o pendente: $e');
      return false;
    }
  }
}
