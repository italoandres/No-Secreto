import 'package:whatsapp_chat/repositories/purpose_partnership_repository.dart';

/// Classe utilit√°ria para testar as cole√ß√µes do Firebase
class FirebaseCollectionsTest {
  
  /// Executar todos os testes de cole√ß√µes
  static Future<void> runAllTests() async {
    print('üß™ Iniciando testes das cole√ß√µes do Firebase...\n');
    
    await _testCollectionInitialization();
    await _testCollectionHealth();
    await _testCollectionPermissions();
    
    print('\n‚úÖ Testes das cole√ß√µes conclu√≠dos!');
  }
  
  /// Testar inicializa√ß√£o das cole√ß√µes
  static Future<void> _testCollectionInitialization() async {
    print('üìã Teste 1: Inicializa√ß√£o das cole√ß√µes');
    
    try {
      await PurposePartnershipRepository.initializeCollections();
      print('‚úÖ Inicializa√ß√£o bem-sucedida\n');
    } catch (e) {
      print('‚ùå Falha na inicializa√ß√£o: $e\n');
    }
  }
  
  /// Testar sa√∫de das cole√ß√µes
  static Future<void> _testCollectionHealth() async {
    print('üè• Teste 2: Sa√∫de das cole√ß√µes');
    
    try {
      final health = await PurposePartnershipRepository.checkCollectionsHealth();
      
      health.forEach((collection, isHealthy) {
        final status = isHealthy ? '‚úÖ' : '‚ùå';
        print('$status $collection: ${isHealthy ? 'OK' : 'ERRO'}');
      });
      
      final allHealthy = health.values.every((h) => h);
      print(allHealthy ? '\n‚úÖ Todas as cole√ß√µes est√£o saud√°veis' : '\n‚ö†Ô∏è Algumas cole√ß√µes t√™m problemas');
      
    } catch (e) {
      print('‚ùå Erro ao verificar sa√∫de: $e');
    }
    
    print('');
  }
  
  /// Testar permiss√µes b√°sicas das cole√ß√µes
  static Future<void> _testCollectionPermissions() async {
    print('üîê Teste 3: Permiss√µes das cole√ß√µes');
    
    // Este teste seria executado apenas em ambiente de desenvolvimento
    // com usu√°rio autenticado para verificar se as regras est√£o funcionando
    
    print('‚ö†Ô∏è Teste de permiss√µes deve ser executado com usu√°rio autenticado');
    print('‚úÖ Regras de seguran√ßa configuradas em firestore.rules\n');
  }
  
  /// Executar teste r√°pido (apenas para desenvolvimento)
  static Future<void> quickTest() async {
    print('‚ö° Teste r√°pido das cole√ß√µes...');
    
    final health = await PurposePartnershipRepository.checkCollectionsHealth();
    final allHealthy = health.values.every((h) => h);
    
    if (allHealthy) {
      print('‚úÖ Todas as cole√ß√µes OK!');
    } else {
      print('‚ö†Ô∏è Problemas detectados nas cole√ß√µes:');
      health.forEach((collection, isHealthy) {
        if (!isHealthy) {
          print('‚ùå $collection');
        }
      });
    }
  }
}