import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Debug para investigar notifica√ß√µes recebidas
class DebugReceivedInterests {
  
  /// Investigar completamente as notifica√ß√µes
  static Future<void> investigateReceivedInterests() async {
    print('üîç INVESTIGANDO NOTIFICA√á√ïES RECEBIDAS');
    print('=' * 60);
    
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        print('‚ùå Usu√°rio n√£o logado');
        return;
      }
      
      final userId = currentUser.uid;
      print('üë§ Usu√°rio: $userId');
      print('üìß Email: ${currentUser.email}');
      
      // 1. Verificar todas as notifica√ß√µes
      await _checkAllNotifications(userId);
      
      // 2. Verificar estat√≠sticas
      await _checkStats(userId);
      
      // 3. Verificar estrutura dos dados
      await _checkDataStructure();
      
      print('');
      print('üéØ INVESTIGA√á√ÉO CONCLU√çDA!');
      
    } catch (e) {
      print('‚ùå Erro na investiga√ß√£o: $e');
    }
  }
  
  /// Verificar todas as notifica√ß√µes
  static Future<void> _checkAllNotifications(String userId) async {
    print('');
    print('üìã VERIFICANDO TODAS AS NOTIFICA√á√ïES:');
    
    try {
      // Buscar TODAS as notifica√ß√µes relacionadas ao usu√°rio
      final sentQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('fromUserId', isEqualTo: userId)
          .get();
      
      final receivedQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: userId)
          .get();
      
      print('   üì§ Notifica√ß√µes ENVIADAS: ${sentQuery.docs.length}');
      for (var doc in sentQuery.docs) {
        final data = doc.data();
        print('      ID: ${doc.id}');
        print('      Para: ${data['toUserId']}');
        print('      Status: ${data['status']}');
        print('      Tipo: ${data['type']}');
        print('      ---');
      }
      
      print('   üì• Notifica√ß√µes RECEBIDAS: ${receivedQuery.docs.length}');
      for (var doc in receivedQuery.docs) {
        final data = doc.data();
        print('      ID: ${doc.id}');
        print('      De: ${data['fromUserId']} (${data['fromUserName']})');
        print('      Status: ${data['status']}');
        print('      Tipo: ${data['type']}');
        print('      Mensagem: ${data['message']}');
        print('      Data: ${data['dataCriacao']}');
        print('      ---');
      }
      
    } catch (e) {
      print('‚ùå Erro ao verificar notifica√ß√µes: $e');
    }
  }
  
  /// Verificar estat√≠sticas
  static Future<void> _checkStats(String userId) async {
    print('');
    print('üìä VERIFICANDO ESTAT√çSTICAS:');
    
    try {
      // Calcular estat√≠sticas manualmente
      final sentQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('fromUserId', isEqualTo: userId)
          .get();
      
      final receivedQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: userId)
          .get();
      
      final sent = sentQuery.docs.length;
      final received = receivedQuery.docs.length;
      
      final acceptedSent = sentQuery.docs
          .where((doc) => doc.data()['status'] == 'accepted')
          .length;
      
      final acceptedReceived = receivedQuery.docs
          .where((doc) => doc.data()['status'] == 'accepted')
          .length;
      
      print('   üì§ Enviados: $sent');
      print('   üì• Recebidos: $received');
      print('   ‚úÖ Aceitos (enviados): $acceptedSent');
      print('   ‚úÖ Aceitos (recebidos): $acceptedReceived');
      
      // Verificar status espec√≠ficos
      final pending = receivedQuery.docs
          .where((doc) => doc.data()['status'] == 'pending')
          .length;
      
      final viewed = receivedQuery.docs
          .where((doc) => doc.data()['status'] == 'viewed')
          .length;
      
      final rejected = receivedQuery.docs
          .where((doc) => doc.data()['status'] == 'rejected')
          .length;
      
      print('   üîÑ Pendentes: $pending');
      print('   üëÅÔ∏è Visualizados: $viewed');
      print('   ‚ùå Rejeitados: $rejected');
      
    } catch (e) {
      print('‚ùå Erro ao verificar estat√≠sticas: $e');
    }
  }
  
  /// Verificar estrutura dos dados
  static Future<void> _checkDataStructure() async {
    print('');
    print('üèóÔ∏è VERIFICANDO ESTRUTURA DOS DADOS:');
    
    try {
      final query = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .limit(3)
          .get();
      
      if (query.docs.isEmpty) {
        print('   ‚ö†Ô∏è Nenhuma notifica√ß√£o encontrada na cole√ß√£o');
        return;
      }
      
      print('   üìã Estrutura dos documentos:');
      for (int i = 0; i < query.docs.length; i++) {
        final doc = query.docs[i];
        final data = doc.data();
        
        print('   Documento ${i + 1}:');
        for (var key in data.keys) {
          print('      $key: ${data[key]} (${data[key].runtimeType})');
        }
        print('      ---');
      }
      
    } catch (e) {
      print('‚ùå Erro ao verificar estrutura: $e');
    }
  }
  
  /// Criar notifica√ß√£o de teste
  static Future<void> createTestNotification() async {
    print('');
    print('üß™ CRIANDO NOTIFICA√á√ÉO DE TESTE:');
    
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        print('‚ùå Usu√°rio n√£o logado');
        return;
      }
      
      // Criar notifica√ß√£o de teste para o pr√≥prio usu√°rio
      await FirebaseFirestore.instance
          .collection('interest_notifications')
          .add({
        'fromUserId': 'test_user_id',
        'fromUserName': 'Usu√°rio Teste',
        'fromUserEmail': 'teste@gmail.com',
        'toUserId': currentUser.uid,
        'toUserEmail': currentUser.email,
        'type': 'interest',
        'message': 'Demonstrou interesse no seu perfil (TESTE)',
        'status': 'pending',
        'dataCriacao': Timestamp.now(),
        'dataResposta': null,
      });
      
      print('‚úÖ Notifica√ß√£o de teste criada!');
      
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o de teste: $e');
    }
  }
}