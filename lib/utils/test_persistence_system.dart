import '../services/notification_local_storage.dart';
import '../services/offline_sync_manager.dart';
import '../services/data_recovery_service.dart';
import '../models/real_notification_model.dart';
import '../utils/enhanced_logger.dart';

/// Utilit√°rio para testar o sistema de persist√™ncia
class PersistenceSystemTester {
  static final NotificationLocalStorage _localStorage = NotificationLocalStorage();
  static final OfflineSyncManager _syncManager = OfflineSyncManager();
  static final DataRecoveryService _recoveryService = DataRecoveryService();

  /// Testa armazenamento local completo
  static Future<void> testLocalStorage(String userId) async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Testando armazenamento local');

    try {
      // 1. Inicializa armazenamento
      await _localStorage.initialize();
      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Armazenamento inicializado');

      // 2. Cria notifica√ß√µes de teste
      final testNotifications = _createTestNotifications(userId, 10);
      EnhancedLogger.log('üìù [PERSISTENCE_TEST] Criadas ${testNotifications.length} notifica√ß√µes de teste');

      // 3. Testa salvamento
      final saveSuccess = await _localStorage.saveNotifications(userId, testNotifications);
      EnhancedLogger.log('üíæ [PERSISTENCE_TEST] Salvamento: ${saveSuccess ? 'SUCESSO' : 'FALHA'}');

      // 4. Testa carregamento
      final loadedNotifications = await _localStorage.loadNotifications(userId);
      EnhancedLogger.log('üìÇ [PERSISTENCE_TEST] Carregadas ${loadedNotifications.length} notifica√ß√µes');

      // 5. Verifica integridade
      final integrityOk = _verifyIntegrity(testNotifications, loadedNotifications);
      EnhancedLogger.log('üîç [PERSISTENCE_TEST] Integridade: ${integrityOk ? 'OK' : 'FALHA'}');

      // 6. Testa adi√ß√£o individual
      final newNotification = _createTestNotifications(userId, 1).first;
      final addSuccess = await _localStorage.addNotification(userId, newNotification);
      EnhancedLogger.log('‚ûï [PERSISTENCE_TEST] Adi√ß√£o individual: ${addSuccess ? 'SUCESSO' : 'FALHA'}');

      // 7. Testa atualiza√ß√£o
      newNotification.message = 'Mensagem atualizada';
      final updateSuccess = await _localStorage.updateNotification(userId, newNotification);
      EnhancedLogger.log('‚úèÔ∏è [PERSISTENCE_TEST] Atualiza√ß√£o: ${updateSuccess ? 'SUCESSO' : 'FALHA'}');

      // 8. Testa remo√ß√£o
      final removeSuccess = await _localStorage.removeNotification(userId, newNotification.id);
      EnhancedLogger.log('üóëÔ∏è [PERSISTENCE_TEST] Remo√ß√£o: ${removeSuccess ? 'SUCESSO' : 'FALHA'}');

      // 9. Obt√©m estat√≠sticas
      final stats = await _localStorage.getStorageStats(userId);
      EnhancedLogger.log('üìä [PERSISTENCE_TEST] Estat√≠sticas: $stats');

      // 10. Testa limpeza
      final clearSuccess = await _localStorage.clearNotifications(userId);
      EnhancedLogger.log('üßπ [PERSISTENCE_TEST] Limpeza: ${clearSuccess ? 'SUCESSO' : 'FALHA'}');

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Teste de armazenamento local conclu√≠do');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro no teste de armazenamento: $e');
    }
  }

  /// Testa sincroniza√ß√£o offline/online
  static Future<void> testOfflineSync(String userId) async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Testando sincroniza√ß√£o offline/online');

    try {
      // 1. Inicializa gerenciador de sincroniza√ß√£o
      await _syncManager.initialize();
      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Gerenciador de sincroniza√ß√£o inicializado');

      // 2. Monitora status de conectividade
      final connectivitySubscription = _syncManager.connectivityStream.listen((status) {
        EnhancedLogger.log('üì∂ [PERSISTENCE_TEST] Status de conectividade: $status');
      });

      // 3. Monitora progresso de sincroniza√ß√£o
      final progressSubscription = _syncManager.syncProgressStream.listen((progress) {
        EnhancedLogger.log('üîÑ [PERSISTENCE_TEST] Progresso: ${(progress.progress * 100).toInt()}% - ${progress.message}');
      });

      // 4. Cria opera√ß√µes pendentes
      final pendingOps = [
        PendingOperation(
          id: 'op1',
          userId: userId,
          type: 'add',
          data: _createTestNotifications(userId, 1).first.toJson(),
          timestamp: DateTime.now(),
        ),
        PendingOperation(
          id: 'op2',
          userId: userId,
          type: 'update',
          data: _createTestNotifications(userId, 1).first.toJson(),
          timestamp: DateTime.now(),
        ),
      ];

      for (final op in pendingOps) {
        await _syncManager.addPendingOperation(op);
      }

      EnhancedLogger.log('üìù [PERSISTENCE_TEST] Adicionadas ${pendingOps.length} opera√ß√µes pendentes');

      // 5. Testa sincroniza√ß√£o
      final syncResult = await _syncManager.syncNotifications(userId);
      EnhancedLogger.log('üîÑ [PERSISTENCE_TEST] Resultado da sincroniza√ß√£o:');
      EnhancedLogger.log('   Sucesso: ${syncResult.success}');
      EnhancedLogger.log('   Mensagem: ${syncResult.message}');
      EnhancedLogger.log('   Sincronizadas: ${syncResult.syncedCount}');
      EnhancedLogger.log('   Falhas: ${syncResult.failedCount}');

      // 6. Obt√©m estat√≠sticas
      final stats = await _syncManager.getSyncStats(userId);
      EnhancedLogger.log('üìä [PERSISTENCE_TEST] Estat√≠sticas de sincroniza√ß√£o: $stats');

      // 7. Testa for√ßa de sincroniza√ß√£o
      final forceResult = await _syncManager.forceSync(userId);
      EnhancedLogger.log('‚ö° [PERSISTENCE_TEST] For√ßa de sincroniza√ß√£o: ${forceResult.success ? 'SUCESSO' : 'FALHA'}');

      // Limpa subscriptions
      await connectivitySubscription.cancel();
      await progressSubscription.cancel();

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Teste de sincroniza√ß√£o conclu√≠do');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro no teste de sincroniza√ß√£o: $e');
    }
  }

  /// Testa recupera√ß√£o de dados
  static Future<void> testDataRecovery(String userId) async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Testando recupera√ß√£o de dados');

    try {
      // 1. Monitora progresso de recupera√ß√£o
      final progressSubscription = _recoveryService.recoveryProgressStream.listen((progress) {
        EnhancedLogger.log('üîÑ [PERSISTENCE_TEST] Recupera√ß√£o: ${(progress.progress * 100).toInt()}% - ${progress.message}');
      });

      // 2. Cria backup de emerg√™ncia
      final testNotifications = _createTestNotifications(userId, 5);
      final backupSuccess = await _recoveryService.createEmergencyBackup(userId, testNotifications);
      EnhancedLogger.log('üíæ [PERSISTENCE_TEST] Backup de emerg√™ncia: ${backupSuccess ? 'SUCESSO' : 'FALHA'}');

      // 3. Escaneia dados perdidos
      final recoveryData = await _recoveryService.scanForLostData(userId);
      EnhancedLogger.log('üîç [PERSISTENCE_TEST] Fontes de recupera√ß√£o encontradas: ${recoveryData.length}');

      for (final data in recoveryData) {
        EnhancedLogger.log('   Fonte: ${data.source} - ${data.notifications.length} notifica√ß√µes');
      }

      // 4. Testa recupera√ß√£o autom√°tica
      final recoveryResult = await _recoveryService.recoverLostData(userId);
      EnhancedLogger.log('üîÑ [PERSISTENCE_TEST] Resultado da recupera√ß√£o:');
      EnhancedLogger.log('   Sucesso: ${recoveryResult.success}');
      EnhancedLogger.log('   Mensagem: ${recoveryResult.message}');
      EnhancedLogger.log('   Recuperadas: ${recoveryResult.recoveredCount}');
      EnhancedLogger.log('   Total encontrado: ${recoveryResult.totalFound}');
      EnhancedLogger.log('   Tipo: ${recoveryResult.recoveryType}');

      // 5. Testa restaura√ß√£o de backup de emerg√™ncia
      final restoredNotifications = await _recoveryService.restoreEmergencyBackup(userId);
      EnhancedLogger.log('üìÇ [PERSISTENCE_TEST] Backup restaurado: ${restoredNotifications.length} notifica√ß√µes');

      // 6. Testa valida√ß√£o de integridade
      final integrityValid = await _recoveryService.validateDataIntegrity(userId, testNotifications);
      EnhancedLogger.log('üîç [PERSISTENCE_TEST] Valida√ß√£o de integridade: ${integrityValid ? 'V√ÅLIDA' : 'INV√ÅLIDA'}');

      // 7. Obt√©m estat√≠sticas de recupera√ß√£o
      final recoveryStats = _recoveryService.getRecoveryStats(userId);
      EnhancedLogger.log('üìä [PERSISTENCE_TEST] Estat√≠sticas de recupera√ß√£o: $recoveryStats');

      // Limpa subscription
      await progressSubscription.cancel();

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Teste de recupera√ß√£o conclu√≠do');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro no teste de recupera√ß√£o: $e');
    }
  }

  /// Testa cen√°rio de falha e recupera√ß√£o
  static Future<void> testFailureRecoveryScenario(String userId) async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Testando cen√°rio de falha e recupera√ß√£o');

    try {
      // 1. Salva dados iniciais
      final initialNotifications = _createTestNotifications(userId, 20);
      await _localStorage.saveNotifications(userId, initialNotifications);
      EnhancedLogger.log('üíæ [PERSISTENCE_TEST] Dados iniciais salvos: ${initialNotifications.length}');

      // 2. Cria backup
      await _recoveryService.createEmergencyBackup(userId, initialNotifications);
      EnhancedLogger.log('üíæ [PERSISTENCE_TEST] Backup criado');

      // 3. Simula falha - limpa dados
      await _localStorage.clearNotifications(userId);
      EnhancedLogger.log('üí• [PERSISTENCE_TEST] Falha simulada - dados limpos');

      // 4. Verifica se dados foram perdidos
      final lostData = await _localStorage.loadNotifications(userId);
      EnhancedLogger.log('üì≠ [PERSISTENCE_TEST] Dados ap√≥s falha: ${lostData.length}');

      // 5. Executa recupera√ß√£o
      final recoveryResult = await _recoveryService.recoverLostData(userId);
      EnhancedLogger.log('üîÑ [PERSISTENCE_TEST] Recupera√ß√£o executada: ${recoveryResult.success}');

      // 6. Verifica dados recuperados
      final recoveredData = await _localStorage.loadNotifications(userId);
      EnhancedLogger.log('üìÇ [PERSISTENCE_TEST] Dados recuperados: ${recoveredData.length}');

      // 7. Valida recupera√ß√£o
      final recoverySuccess = recoveredData.length > 0;
      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Cen√°rio de recupera√ß√£o: ${recoverySuccess ? 'SUCESSO' : 'FALHA'}');

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Cen√°rio de falha e recupera√ß√£o conclu√≠do');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro no cen√°rio de falha: $e');
    }
  }

  /// Testa performance do sistema
  static Future<void> testPerformance(String userId) async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Testando performance do sistema');

    try {
      final stopwatch = Stopwatch();

      // 1. Testa salvamento de grande volume
      stopwatch.start();
      final largeDataset = _createTestNotifications(userId, 1000);
      final saveTime = stopwatch.elapsedMilliseconds;
      stopwatch.reset();

      await _localStorage.saveNotifications(userId, largeDataset);
      final persistTime = stopwatch.elapsedMilliseconds;
      stopwatch.reset();

      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Cria√ß√£o de 1000 notifica√ß√µes: ${saveTime}ms');
      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Salvamento de 1000 notifica√ß√µes: ${persistTime}ms');

      // 2. Testa carregamento
      stopwatch.start();
      final loadedData = await _localStorage.loadNotifications(userId);
      final loadTime = stopwatch.elapsedMilliseconds;
      stopwatch.reset();

      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Carregamento de ${loadedData.length} notifica√ß√µes: ${loadTime}ms');

      // 3. Testa opera√ß√µes individuais
      final singleNotification = _createTestNotifications(userId, 1).first;

      stopwatch.start();
      await _localStorage.addNotification(userId, singleNotification);
      final addTime = stopwatch.elapsedMilliseconds;
      stopwatch.reset();

      stopwatch.start();
      await _localStorage.updateNotification(userId, singleNotification);
      final updateTime = stopwatch.elapsedMilliseconds;
      stopwatch.reset();

      stopwatch.start();
      await _localStorage.removeNotification(userId, singleNotification.id);
      final removeTime = stopwatch.elapsedMilliseconds;

      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Adi√ß√£o individual: ${addTime}ms');
      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Atualiza√ß√£o individual: ${updateTime}ms');
      EnhancedLogger.log('‚è±Ô∏è [PERSISTENCE_TEST] Remo√ß√£o individual: ${removeTime}ms');

      // 4. Obt√©m tamanho do armazenamento
      final storageSize = await _localStorage.getStorageSize(userId);
      EnhancedLogger.log('üìè [PERSISTENCE_TEST] Tamanho do armazenamento: ${storageSize} bytes');

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Teste de performance conclu√≠do');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro no teste de performance: $e');
    }
  }

  /// Executa bateria completa de testes
  static Future<void> runAllTests() async {
    EnhancedLogger.log('üß™ [PERSISTENCE_TEST] Executando bateria completa de testes');

    final testUserId = 'test_persistence_${DateTime.now().millisecondsSinceEpoch}';

    try {
      // 1. Testa armazenamento local
      await testLocalStorage(testUserId);
      await Future.delayed(Duration(seconds: 1));

      // 2. Testa sincroniza√ß√£o offline/online
      await testOfflineSync(testUserId);
      await Future.delayed(Duration(seconds: 1));

      // 3. Testa recupera√ß√£o de dados
      await testDataRecovery(testUserId);
      await Future.delayed(Duration(seconds: 1));

      // 4. Testa cen√°rio de falha
      await testFailureRecoveryScenario(testUserId);
      await Future.delayed(Duration(seconds: 1));

      // 5. Testa performance
      await testPerformance(testUserId);

      // 6. Limpa dados de teste
      await _localStorage.clearNotifications(testUserId);
      await _syncManager.clearPendingOperations(testUserId);

      EnhancedLogger.log('‚úÖ [PERSISTENCE_TEST] Todos os testes conclu√≠dos com sucesso');

    } catch (e) {
      EnhancedLogger.log('‚ùå [PERSISTENCE_TEST] Erro na bateria de testes: $e');
    }
  }

  /// Cria notifica√ß√µes de teste
  static List<RealNotificationModel> _createTestNotifications(String userId, int count) {
    final notifications = <RealNotificationModel>[];

    for (int i = 0; i < count; i++) {
      notifications.add(RealNotificationModel(
        id: 'test_notification_${DateTime.now().millisecondsSinceEpoch}_$i',
        userId: userId,
        type: 'test',
        title: 'Notifica√ß√£o de Teste $i',
        message: 'Esta √© uma notifica√ß√£o de teste n√∫mero $i',
        timestamp: DateTime.now().subtract(Duration(minutes: i)),
        isRead: i % 2 == 0,
        data: {
          'testIndex': i,
          'testType': 'persistence_test',
          'createdAt': DateTime.now().toIso8601String(),
        },
      ));
    }

    return notifications;
  }

  /// Verifica integridade entre duas listas
  static bool _verifyIntegrity(List<RealNotificationModel> original, List<RealNotificationModel> loaded) {
    if (original.length != loaded.length) {
      return false;
    }

    final originalIds = original.map((n) => n.id).toSet();
    final loadedIds = loaded.map((n) => n.id).toSet();

    return originalIds.difference(loadedIds).isEmpty && 
           loadedIds.difference(originalIds).isEmpty;
  }
}

/// Fun√ß√£o de conveni√™ncia para teste r√°pido
Future<void> testPersistenceQuick() async {
  final testUserId = 'quick_persistence_test_${DateTime.now().millisecondsSinceEpoch}';
  await PersistenceSystemTester.testLocalStorage(testUserId);
}

/// Fun√ß√£o de conveni√™ncia para teste completo
Future<void> testPersistenceComplete() async {
  await PersistenceSystemTester.runAllTests();
}