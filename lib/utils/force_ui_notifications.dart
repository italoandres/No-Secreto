import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../utils/enhanced_logger.dart';
import '../models/real_notification_model.dart';
import '../controllers/matches_controller.dart';

/// FOR√áA NOTIFICA√á√ïES DIRETAMENTE NA INTERFACE
class ForceUINotifications {
  
  /// FOR√áA notifica√ß√µes a aparecerem na interface AGORA
  static void forceShowInUI(String userId) {
    EnhancedLogger.info('üöÄ FOR√áANDO NOTIFICA√á√ïES NA INTERFACE PARA: $userId');
    
    try {
      // 1. Cria notifica√ß√µes fake para for√ßar exibi√ß√£o
      final fakeNotifications = [
        RealNotification(
          id: 'force_ui_1',
          type: 'interest',
          fromUserId: 'test_force_ui',
          fromUserName: 'üöÄ SISTEMA TESTE',
          message: 'NOTIFICA√á√ÉO FOR√áADA NA INTERFACE!',
          timestamp: DateTime.now(),
          isRead: false,
        ),
        RealNotification(
          id: 'force_ui_2', 
          type: 'like',
          fromUserId: 'test_force_ui_2',
          fromUserName: '‚úÖ TESTE FUNCIONANDO',
          message: 'Esta notifica√ß√£o foi for√ßada diretamente na UI!',
          timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
          isRead: false,
        ),
      ];
      
      // 2. For√ßa no controller
      final controller = Get.find<MatchesController>();
      controller.realInterestNotifications.value = fakeNotifications;
      controller.realInterestNotificationsCount.value = fakeNotifications.length;
      
      // 3. For√ßa atualiza√ß√£o da interface
      controller.update();
      
      // 4. Mostra snackbar de confirma√ß√£o
      Get.snackbar(
        'üöÄ SUCESSO!',
        'Notifica√ß√µes for√ßadas na interface! Total: ${fakeNotifications.length}',
        backgroundColor: Colors.green,
        colorText: Colors.white,
        duration: const Duration(seconds: 5),
        snackPosition: SnackPosition.TOP,
      );
      
      EnhancedLogger.success('‚úÖ NOTIFICA√á√ïES FOR√áADAS NA INTERFACE!');
      EnhancedLogger.info('üìä Total for√ßado: ${fakeNotifications.length}');
      
    } catch (e, stackTrace) {
      EnhancedLogger.error('‚ùå Erro ao for√ßar na interface', error: e, stackTrace: stackTrace);
      
      // Fallback: Mostra snackbar de erro
      Get.snackbar(
        '‚ùå ERRO',
        'Erro ao for√ßar notifica√ß√µes: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
    }
  }
  
  /// Limpa notifica√ß√µes for√ßadas
  static void clearForcedNotifications() {
    try {
      final controller = Get.find<MatchesController>();
      controller.realInterestNotifications.clear();
      controller.realInterestNotificationsCount.value = 0;
      controller.update();
      
      Get.snackbar(
        'üßπ LIMPO!',
        'Notifica√ß√µes for√ßadas removidas',
        backgroundColor: Colors.grey,
        colorText: Colors.white,
        duration: const Duration(seconds: 2),
      );
      
      EnhancedLogger.info('üßπ Notifica√ß√µes for√ßadas removidas da interface');
      
    } catch (e) {
      EnhancedLogger.error('‚ùå Erro ao limpar notifica√ß√µes for√ßadas', error: e);
    }
  }
  
  /// Widget para mostrar bot√£o de for√ßa
  static Widget buildForceUIButton(String userId) {
    return Container(
      margin: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElevatedButton.icon(
            onPressed: () => forceShowInUI(userId),
            icon: const Icon(Icons.visibility),
            label: const Text('üöÄ FOR√áAR NA INTERFACE'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.purple,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
          const SizedBox(height: 8),
          ElevatedButton.icon(
            onPressed: () => clearForcedNotifications(),
            icon: const Icon(Icons.clear),
            label: const Text('üßπ LIMPAR INTERFACE'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
        ],
      ),
    );
  }
}