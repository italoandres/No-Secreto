import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

/// Debug do fluxo de notifica√ß√µes para identificar problemas
class DebugNotificationFlow {
  
  /// Verificar estado atual das notifica√ß√µes
  static Future<void> debugCurrentState() async {
    print('üîç DEBUGANDO ESTADO ATUAL DAS NOTIFICA√á√ïES');
    print('=' * 60);
    
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        print('‚ùå Usu√°rio n√£o logado');
        return;
      }
      
      print('‚úÖ Usu√°rio atual: ${currentUser.uid}');
      print('üìß Email: ${currentUser.email}');
      
      // 1. Verificar cole√ß√£o de notifica√ß√µes
      await _debugNotificationsCollection(currentUser.uid);
      
      // 2. Verificar usu√°rios espec√≠ficos
      await _debugSpecificUsers();
      
      // 3. Verificar estrutura dos dados
      await _debugDataStructure();
      
      print('');
      print('üéØ DEBUG CONCLU√çDO!');
      
    } catch (e) {
      print('‚ùå Erro no debug: $e');
    }
  }
  
  /// Debug da cole√ß√£o de notifica√ß√µes
  static Future<void> _debugNotificationsCollection(String currentUserId) async {
    print('');
    print('üìã DEBUGANDO COLE√á√ÉO DE NOTIFICA√á√ïES:');
    
    try {
      // Buscar todas as notifica√ß√µes relacionadas ao usu√°rio atual
      final sentQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('fromUserId', isEqualTo: currentUserId)
          .get();
      
      final receivedQuery = await FirebaseFirestore.instance
          .collection('interest_notifications')
          .where('toUserId', isEqualTo: currentUserId)
          .get();
      
      print('   üì§ Notifica√ß√µes ENVIADAS: ${sentQuery.docs.length}');
      for (var doc in sentQuery.docs) {
        final data = doc.data();
        print('      ID: ${doc.id}');
        print('      Para: ${data['toUserId']}');
        print('      Status: ${data['status']}');
        print('      Tipo: ${data['type']}');
        print('      Data: ${data['dataCriacao']}');
        print('      ---');
      }
      
      print('   üì• Notifica√ß√µes RECEBIDAS: ${receivedQuery.docs.length}');
      for (var doc in receivedQuery.docs) {
        final data = doc.data();
        print('      ID: ${doc.id}');
        print('      De: ${data['fromUserId']} (${data['fromUserName']})');
        print('      Status: ${data['status']}');
        print('      Tipo: ${data['type']}');
        print('      Mensagem: ${data['message']}');
        print('      Data: ${data['dataCriacao']}');
        print('      ---');
      }
      
    } catch (e) {
      print('‚ùå Erro ao debugar cole√ß√£o: $e');
    }
  }
  
  /// Debug de usu√°rios espec√≠ficos
  static Future<void> _debugSpecificUsers() async {
    print('');
    print('üë• DEBUGANDO USU√ÅRIOS ESPEC√çFICOS:');
    
    try {
      // Buscar usu√°rios italo e itala3
      final usersQuery = await FirebaseFirestore.instance
          .collection('usuarios')
          .where('email', whereIn: ['italo1@gmail.com', 'itala3@gmail.com'])
          .get();
      
      print('   üë§ Usu√°rios encontrados: ${usersQuery.docs.length}');
      
      for (var doc in usersQuery.docs) {
        final data = doc.data();
        print('      ID: ${doc.id}');
        print('      Nome: ${data['nome']}');
        print('      Email: ${data['email']}');
        print('      ---');
      }
      
    } catch (e) {
      print('‚ùå Erro ao debugar usu√°rios: $e');
    }
  }
  
  /// Debug da estrutura dos dados
  static Future<void> _debugDataStructure() async {
    print('');
    print('üèóÔ∏è DEBUGANDO ESTRUTURA DOS DADOS:');
    
    try {
      // Verificar se a cole√ß√£o existe
      final collectionRef = FirebaseFirestore.instance.collection('interest_notifications');
      final snapshot = await collectionRef.limit(1).get();
      
      if (snapshot.docs.isEmpty) {
        print('   ‚ö†Ô∏è Cole√ß√£o interest_notifications est√° VAZIA');
        print('   üí° Isso pode explicar por que n√£o h√° notifica√ß√µes');
      } else {
        print('   ‚úÖ Cole√ß√£o interest_notifications existe');
        final firstDoc = snapshot.docs.first;
        print('   üìã Estrutura do primeiro documento:');
        
        final data = firstDoc.data();
        for (var key in data.keys) {
          print('      $key: ${data[key]} (${data[key].runtimeType})');
        }
      }
      
    } catch (e) {
      print('‚ùå Erro ao debugar estrutura: $e');
    }
  }
  
  /// Criar notifica√ß√£o de teste
  static Future<void> createTestNotification() async {
    print('');
    print('üß™ CRIANDO NOTIFICA√á√ÉO DE TESTE:');
    
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        print('‚ùå Usu√°rio n√£o logado');
        return;
      }
      
      // Buscar outro usu√°rio para teste
      final usersQuery = await FirebaseFirestore.instance
          .collection('usuarios')
          .where('email', isNotEqualTo: currentUser.email)
          .limit(1)
          .get();
      
      if (usersQuery.docs.isEmpty) {
        print('‚ùå Nenhum outro usu√°rio encontrado para teste');
        return;
      }
      
      final targetUser = usersQuery.docs.first;
      final targetData = targetUser.data();
      
      // Criar notifica√ß√£o de teste
      await FirebaseFirestore.instance
          .collection('interest_notifications')
          .add({
        'fromUserId': currentUser.uid,
        'fromUserName': 'Usu√°rio Teste',
        'fromUserEmail': currentUser.email,
        'toUserId': targetUser.id,
        'toUserEmail': targetData['email'],
        'type': 'interest',
        'message': 'Demonstrou interesse no seu perfil (TESTE)',
        'status': 'pending',
        'dataCriacao': Timestamp.now(),
        'dataResposta': null,
      });
      
      print('‚úÖ Notifica√ß√£o de teste criada!');
      print('   De: ${currentUser.uid}');
      print('   Para: ${targetUser.id}');
      
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o de teste: $e');
    }
  }
  
  /// Widget para debug na interface
  static Widget buildDebugWidget() {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Debug Notifica√ß√µes'),
        backgroundColor: Colors.orange,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Debug do Sistema de Notifica√ß√µes',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            
            const SizedBox(height: 20),
            
            ElevatedButton.icon(
              onPressed: () => debugCurrentState(),
              icon: const Icon(Icons.bug_report),
              label: const Text('Debug Estado Atual'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.all(16),
              ),
            ),
            
            const SizedBox(height: 12),
            
            ElevatedButton.icon(
              onPressed: () => createTestNotification(),
              icon: const Icon(Icons.add_alert),
              label: const Text('Criar Notifica√ß√£o de Teste'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.all(16),
              ),
            ),
            
            const SizedBox(height: 20),
            
            const Card(
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'O que este debug verifica:',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text('üîç Estado atual das notifica√ß√µes'),
                    Text('üë• Usu√°rios espec√≠ficos (italo, itala3)'),
                    Text('üèóÔ∏è Estrutura dos dados no Firebase'),
                    Text('üìä Contadores e estat√≠sticas'),
                    Text('üß™ Cria√ß√£o de notifica√ß√µes de teste'),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 12),
            
            const Card(
              color: Colors.yellow,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '‚ö†Ô∏è IMPORTANTE:',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text('Veja os resultados no CONSOLE/DEBUG do seu IDE'),
                    Text('Os logs aparecem na sa√≠da de debug, n√£o na tela'),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}