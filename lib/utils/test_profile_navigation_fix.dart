import 'package:flutter/material.dart';
import '../models/spiritual_profile_model.dart';
import 'vitrine_profile_filter.dart';

/// Teste para verificar se a navega√ß√£o para perfil est√° funcionando corretamente
class TestProfileNavigationFix {
  
  /// Testa se os IDs est√£o sendo passados corretamente
  static Future<void> testProfileIds() async {
    print('üîç === TESTE NAVEGA√á√ÉO PERFIL ===');
    
    try {
      // Buscar perfis de teste
      final profiles = await VitrineProfileFilter.searchCompleteVitrineProfiles(
        query: 'itala',
        limit: 5,
      );
      
      print('\nüìä PERFIS ENCONTRADOS: ${profiles.length}');
      
      for (var profile in profiles) {
        print('\nüéØ PERFIL: ${profile.displayName} (@${profile.username})');
        print('   ‚Ä¢ ID do documento: ${profile.id}');
        print('   ‚Ä¢ UserId real: ${profile.userId}');
        print('   ‚Ä¢ Cidade: ${profile.city}');
        
        // Verificar qual ID deve ser usado para navega√ß√£o
        final navigationId = profile.userId ?? profile.id;
        print('   ‚Ä¢ ID para navega√ß√£o: $navigationId');
        
        // Simular o que acontece na navega√ß√£o
        if (profile.userId != null && profile.userId!.isNotEmpty) {
          print('   ‚úÖ CORRETO: Usando userId para navega√ß√£o');
        } else {
          print('   ‚ö†Ô∏è  FALLBACK: Usando document ID (pode causar erro)');
        }
      }
      
      // Teste espec√≠fico para itala3
      final itala3 = profiles.where((p) => p.username == 'itala3').firstOrNull;
      if (itala3 != null) {
        print('\nüéØ TESTE ESPEC√çFICO @itala3:');
        print('   ‚Ä¢ Document ID: ${itala3.id}');
        print('   ‚Ä¢ User ID: ${itala3.userId}');
        print('   ‚Ä¢ Navega√ß√£o usar√°: ${itala3.userId ?? itala3.id}');
        
        // Verificar se os IDs s√£o diferentes (o que causava o problema)
        if (itala3.id != itala3.userId) {
          print('   ‚úÖ PROBLEMA IDENTIFICADO: IDs s√£o diferentes!');
          print('   ‚úÖ CORRE√á√ÉO: Agora usa userId em vez de document ID');
        } else {
          print('   ‚ÑπÔ∏è  IDs s√£o iguais, n√£o h√° problema');
        }
      }
      
      print('\nüéâ TESTE CONCLU√çDO!');
      
    } catch (e, stackTrace) {
      print('‚ùå ERRO no teste: $e');
      print('Stack trace: $stackTrace');
    }
  }
  
  /// Widget para executar o teste na interface
  static Widget buildTestWidget() {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Teste Navega√ß√£o Perfil'),
        backgroundColor: Colors.green,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.account_circle,
              size: 80,
              color: Colors.green,
            ),
            const SizedBox(height: 20),
            const Text(
              'Teste de Navega√ß√£o para Perfil',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            const Text(
              'Verificar se os IDs est√£o corretos',
              style: TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 40),
            ElevatedButton(
              onPressed: () async {
                await testProfileIds();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: const EdgeInsets.symmetric(
                  horizontal: 40,
                  vertical: 15,
                ),
              ),
              child: const Text(
                'EXECUTAR TESTE',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}