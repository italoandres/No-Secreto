/// Configura√ß√µes e utilit√°rios para debug de contexto
/// 
/// Esta classe centraliza as configura√ß√µes de debug e fornece
/// m√©todos padronizados para logging de opera√ß√µes de contexto.
class ContextDebug {
  /// Flag para habilitar logs detalhados de contexto
  static const bool ENABLE_CONTEXT_LOGS = true;
  
  /// Flag para valida√ß√£o rigorosa de contexto
  static const bool VALIDATE_CONTEXT_STRICT = true;
  
  /// Flag para filtrar automaticamente contextos inv√°lidos
  static const bool FILTER_INVALID_CONTEXTS = true;
  
  /// Flag para detectar vazamentos de contexto
  static const bool DETECT_CONTEXT_LEAKS = true;
  
  /// Flag para logs de performance de consultas
  static const bool LOG_QUERY_PERFORMANCE = true;
  
  /// Prefixos para diferentes tipos de log
  static const String _PREFIX_LOAD = 'üì• CONTEXT_LOAD';
  static const String _PREFIX_FILTER = 'üîç CONTEXT_FILTER';
  static const String _PREFIX_VALIDATE = '‚úÖ CONTEXT_VALIDATE';
  static const String _PREFIX_ERROR = '‚ùå CONTEXT_ERROR';
  static const String _PREFIX_LEAK = 'üö® CONTEXT_LEAK';
  static const String _PREFIX_PERF = '‚ö° CONTEXT_PERF';
  
  /// Log de carregamento de stories por contexto
  /// 
  /// [context] - O contexto sendo carregado
  /// [collection] - A cole√ß√£o sendo consultada
  /// [count] - N√∫mero de stories carregados
  /// [operation] - Nome da opera√ß√£o
  static void logLoad(String context, String collection, int count, String operation) {
    if (!ENABLE_CONTEXT_LOGS) return;
    
    print('$_PREFIX_LOAD: $operation');
    print('   - Contexto: "$context"');
    print('   - Cole√ß√£o: "$collection"');
    print('   - Stories carregados: $count');
  }
  
  /// Log de opera√ß√£o de filtro
  /// 
  /// [context] - O contexto sendo filtrado
  /// [originalCount] - N√∫mero original de stories
  /// [filteredCount] - N√∫mero ap√≥s filtro
  /// [operation] - Nome da opera√ß√£o
  static void logFilter(String context, int originalCount, int filteredCount, String operation) {
    if (!ENABLE_CONTEXT_LOGS) return;
    
    final removed = originalCount - filteredCount;
    print('$_PREFIX_FILTER: $operation');
    print('   - Contexto: "$context"');
    print('   - Stories originais: $originalCount');
    print('   - Stories ap√≥s filtro: $filteredCount');
    if (removed > 0) {
      print('   - ‚ö†Ô∏è Stories removidos: $removed');
    }
  }
  
  /// Log de valida√ß√£o de contexto
  /// 
  /// [context] - O contexto sendo validado
  /// [isValid] - Se o contexto √© v√°lido
  /// [operation] - Nome da opera√ß√£o
  static void logValidation(String? context, bool isValid, String operation) {
    if (!ENABLE_CONTEXT_LOGS) return;
    
    if (isValid) {
      print('$_PREFIX_VALIDATE: $operation - Contexto "$context" √© v√°lido');
    } else {
      print('$_PREFIX_ERROR: $operation - Contexto "$context" √© inv√°lido');
    }
  }
  
  /// Log de vazamento de contexto detectado
  /// 
  /// [expectedContext] - O contexto esperado
  /// [leaks] - Mapa de vazamentos detectados
  /// [operation] - Nome da opera√ß√£o
  static void logLeak(String expectedContext, Map<String, int> leaks, String operation) {
    if (!ENABLE_CONTEXT_LOGS || !DETECT_CONTEXT_LEAKS) return;
    
    print('$_PREFIX_LEAK: $operation - Vazamentos detectados para contexto "$expectedContext":');
    leaks.forEach((context, count) {
      print('   - $count stories do contexto "$context"');
    });
  }
  
  /// Log de performance de consulta
  /// 
  /// [operation] - Nome da opera√ß√£o
  /// [duration] - Dura√ß√£o da opera√ß√£o
  /// [context] - Contexto da consulta
  /// [count] - N√∫mero de resultados
  static void logPerformance(String operation, Duration duration, String context, int count) {
    if (!ENABLE_CONTEXT_LOGS || !LOG_QUERY_PERFORMANCE) return;
    
    print('$_PREFIX_PERF: $operation');
    print('   - Contexto: "$context"');
    print('   - Dura√ß√£o: ${duration.inMilliseconds}ms');
    print('   - Resultados: $count');
  }
  
  /// Log de erro cr√≠tico de contexto
  /// 
  /// [operation] - Nome da opera√ß√£o
  /// [error] - Descri√ß√£o do erro
  /// [context] - Contexto relacionado ao erro
  static void logCriticalError(String operation, String error, String? context) {
    print('$_PREFIX_ERROR: ERRO CR√çTICO em $operation');
    print('   - Contexto: "$context"');
    print('   - Erro: $error');
  }
  
  /// Executa uma opera√ß√£o com medi√ß√£o de performance
  /// 
  /// [operation] - Nome da opera√ß√£o
  /// [context] - Contexto da opera√ß√£o
  /// [function] - Fun√ß√£o a ser executada
  /// Retorna o resultado da fun√ß√£o
  static T measurePerformance<T>(String operation, String context, T Function() function) {
    if (!LOG_QUERY_PERFORMANCE) {
      return function();
    }
    
    final stopwatch = Stopwatch()..start();
    final result = function();
    stopwatch.stop();
    
    // Tentar determinar contagem se o resultado for uma lista
    int count = 0;
    if (result is List) {
      count = result.length;
    }
    
    logPerformance(operation, stopwatch.elapsed, context, count);
    return result;
  }
  
  /// Cria um resumo de debug para uma opera√ß√£o de contexto
  /// 
  /// [operation] - Nome da opera√ß√£o
  /// [context] - Contexto da opera√ß√£o
  /// [data] - Dados adicionais para o resumo
  static void logSummary(String operation, String context, Map<String, dynamic> data) {
    if (!ENABLE_CONTEXT_LOGS) return;
    
    print('üìã CONTEXT_SUMMARY: $operation');
    print('   - Contexto: "$context"');
    data.forEach((key, value) {
      print('   - $key: $value');
    });
  }
}