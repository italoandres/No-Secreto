import 'package:firebase_auth/firebase_auth.dart';
import 'package:whatsapp_chat/services/notification_service.dart';
import 'package:whatsapp_chat/models/notification_model.dart';
import 'package:whatsapp_chat/repositories/notification_repository.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';

class TestNotifications {
  // Criar uma notifica√ß√£o de teste para verificar se o sistema est√° funcionando
  static Future<void> createTestNotification() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    
    print('üß™ TESTE: Iniciando cria√ß√£o de notifica√ß√£o...');
    print('üß™ TESTE: Usu√°rio atual: ${currentUser?.uid}');
    
    if (currentUser == null) {
      print('‚ùå TESTE: Usu√°rio n√£o autenticado');
      Get.snackbar(
        'Erro',
        'Usu√°rio n√£o autenticado',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    try {
      print('üß™ TESTE: Criando notifica√ß√£o de coment√°rio...');
      
      await NotificationService.createCommentNotification(
        storyId: 'test_story_id',
        storyAuthorId: currentUser.uid,
        commentAuthorId: 'test_user_id',
        commentAuthorName: 'Usu√°rio Teste',
        commentAuthorAvatar: '',
        commentText: 'Este √© um coment√°rio de teste para verificar as notifica√ß√µes!',
      );
      
      print('‚úÖ TESTE: Notifica√ß√£o criada com sucesso!');
      
      Get.snackbar(
        'Sucesso',
        'Notifica√ß√£o de teste criada!',
        backgroundColor: Colors.green,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
      
      print('Notifica√ß√£o de teste criada com sucesso!');
    } catch (e) {
      print('‚ùå TESTE: Erro ao criar notifica√ß√£o: $e');
      
      Get.snackbar(
        'Erro',
        'Erro ao criar notifica√ß√£o: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 5),
      );
      print('Erro ao criar notifica√ß√£o de teste: $e');
    }
  }

  // Criar uma notifica√ß√£o de men√ß√£o de teste
  static Future<void> createTestMentionNotification() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      Get.snackbar(
        'Erro',
        'Usu√°rio n√£o autenticado',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    try {
      await NotificationService.createMentionNotification(
        storyId: 'test_story_id',
        mentionedUserId: currentUser.uid,
        commentAuthorId: 'test_user_id',
        commentAuthorName: 'Usu√°rio Teste',
        commentAuthorAvatar: '',
        commentText: 'Ol√° @usuario, este √© um teste de men√ß√£o!',
      );
      
      Get.snackbar(
        'Sucesso',
        'Notifica√ß√£o de men√ß√£o criada!',
        backgroundColor: Colors.green,
        colorText: Colors.white,
      );
      
      print('Notifica√ß√£o de men√ß√£o de teste criada com sucesso!');
    } catch (e) {
      Get.snackbar(
        'Erro',
        'Erro ao criar notifica√ß√£o: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      print('Erro ao criar notifica√ß√£o de men√ß√£o de teste: $e');
    }
  }

  // Criar notifica√ß√£o de curtida de teste
  static Future<void> createTestLikeNotification() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    
    print('‚ù§Ô∏è TESTE: Iniciando cria√ß√£o de notifica√ß√£o de curtida...');
    
    if (currentUser == null) {
      print('‚ùå TESTE: Usu√°rio n√£o autenticado');
      Get.snackbar(
        'Erro',
        'Usu√°rio n√£o autenticado',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    try {
      print('‚ù§Ô∏è TESTE: Criando notifica√ß√£o de curtida...');
      
      await NotificationService.createCommentLikeNotification(
        storyId: 'test_story_id',
        commentId: 'test_comment_id',
        commentAuthorId: currentUser.uid,
        likerUserId: 'test_liker_id',
        likerUserName: 'Usu√°rio que Curtiu',
        likerUserAvatar: '',
        commentText: 'Este √© meu coment√°rio que foi curtido!',
      );
      
      print('‚úÖ TESTE: Notifica√ß√£o de curtida criada!');
      
      Get.snackbar(
        'Sucesso',
        'Notifica√ß√£o de curtida criada!',
        backgroundColor: Colors.green,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
      
      print('Notifica√ß√£o de curtida de teste criada com sucesso!');
    } catch (e) {
      print('‚ùå TESTE: Erro ao criar notifica√ß√£o de curtida: $e');
      
      Get.snackbar(
        'Erro',
        'Erro ao criar notifica√ß√£o: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 5),
      );
      print('Erro ao criar notifica√ß√£o de curtida de teste: $e');
    }
  }

  // Criar notifica√ß√£o de resposta de teste
  static Future<void> createTestReplyNotification() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      Get.snackbar(
        'Erro',
        'Usu√°rio n√£o autenticado',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    try {
      await NotificationService.createCommentReplyNotification(
        storyId: 'test_story_id',
        parentCommentId: 'test_parent_comment_id',
        parentCommentAuthorId: currentUser.uid,
        replyAuthorId: 'test_reply_author_id',
        replyAuthorName: 'Usu√°rio que Respondeu',
        replyAuthorAvatar: '',
        replyText: 'Esta √© uma resposta ao seu coment√°rio!',
      );
      
      Get.snackbar(
        'Sucesso',
        'Notifica√ß√£o de resposta criada!',
        backgroundColor: Colors.green,
        colorText: Colors.white,
      );
      
      print('Notifica√ß√£o de resposta de teste criada com sucesso!');
    } catch (e) {
      Get.snackbar(
        'Erro',
        'Erro ao criar notifica√ß√£o: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      print('Erro ao criar notifica√ß√£o de resposta de teste: $e');
    }
  }

  // Teste direto no reposit√≥rio (mais simples)
  static Future<void> createDirectTestNotification() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    
    if (currentUser == null) {
      print('‚ùå TESTE DIRETO: Usu√°rio n√£o autenticado');
      Get.snackbar(
        'Erro',
        'Usu√°rio n√£o autenticado',
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    try {
      print('üî• TESTE DIRETO: Criando notifica√ß√£o diretamente...');
      
      final notification = NotificationModel(
        id: 'test_direct_${DateTime.now().millisecondsSinceEpoch}',
        userId: currentUser.uid,
        type: 'comment_like',
        relatedId: 'test_story_direct',
        fromUserId: 'test_direct_user',
        fromUserName: 'Teste Direto',
        fromUserAvatar: '',
        content: 'Esta √© uma notifica√ß√£o criada diretamente!',
        isRead: false,
        timestamp: DateTime.now(),
      );
      
      await NotificationRepository.createNotification(notification);
      
      print('‚úÖ TESTE DIRETO: Notifica√ß√£o criada com sucesso!');
      
      Get.snackbar(
        'Sucesso',
        'Notifica√ß√£o direta criada!',
        backgroundColor: Colors.purple,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
      
    } catch (e) {
      print('‚ùå TESTE DIRETO: Erro: $e');
      
      Get.snackbar(
        'Erro',
        'Erro no teste direto: $e',
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 5),
      );
    }
  }

  // Criar todas as notifica√ß√µes de teste de uma vez
  static Future<void> createAllTestNotifications() async {
    Get.snackbar(
      'Teste',
      'Criando todas as notifica√ß√µes de teste...',
      backgroundColor: Colors.blue,
      colorText: Colors.white,
      duration: const Duration(seconds: 2),
    );

    // Aguardar um pouco entre cada cria√ß√£o para ver o efeito
    await createTestMentionNotification();
    await Future.delayed(const Duration(milliseconds: 500));
    
    await createTestLikeNotification();
    await Future.delayed(const Duration(milliseconds: 500));
    
    await createTestReplyNotification();
    
    Get.snackbar(
      'Conclu√≠do',
      'Todas as notifica√ß√µes de teste foram criadas!',
      backgroundColor: Colors.green,
      colorText: Colors.white,
      duration: const Duration(seconds: 3),
    );
  }

  // Adicionar bot√£o de teste na p√°gina de notifica√ß√µes (apenas para debug)
  static Widget buildTestButton() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Column(
        children: [
          Text(
            'üß™ Testes de Notifica√ß√£o',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.grey.shade700,
            ),
          ),
          const SizedBox(height: 16),
          
          // Teste de Men√ß√£o
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: createTestMentionNotification,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              icon: const Icon(Icons.alternate_email, size: 20),
              label: const Text('Teste: @men√ß√£o em coment√°rio'),
            ),
          ),
          
          const SizedBox(height: 8),
          
          // Teste de Curtida
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: createTestLikeNotification,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              icon: const Icon(Icons.favorite_outline, size: 20),
              label: const Text('Teste: ‚ù§Ô∏è curtida no coment√°rio'),
            ),
          ),
          
          const SizedBox(height: 8),
          
          // Teste de Resposta
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: createTestReplyNotification,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              icon: const Icon(Icons.reply_outlined, size: 20),
              label: const Text('Teste: üí¨ resposta ao coment√°rio'),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Informa√ß√£o sobre os testes
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info_outline, color: Colors.blue.shade600, size: 16),
                    const SizedBox(width: 8),
                    Text(
                      'Como testar:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.blue.shade700,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  '1. Toque em um dos bot√µes acima\n'
                  '2. Veja a notifica√ß√£o aparecer na lista\n'
                  '3. Observe o √≠cone e contador atualizarem\n'
                  '4. Toque na notifica√ß√£o para navegar',
                  style: TextStyle(
                    fontSize: 11,
                    color: Colors.blue.shade600,
                    height: 1.4,
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 12),
          
          // Bot√£o para testar todas de uma vez
          SizedBox(
            width: double.infinity,
            child: OutlinedButton.icon(
              onPressed: createAllTestNotifications,
              style: OutlinedButton.styleFrom(
                foregroundColor: Colors.purple,
                side: BorderSide(color: Colors.purple.shade300),
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              icon: const Icon(Icons.rocket_launch_outlined, size: 20),
              label: const Text('üöÄ Testar Todas as Notifica√ß√µes'),
            ),
          ),
          
          const SizedBox(height: 8),
          
          // Bot√£o de teste direto (para debug)
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: createDirectTestNotification,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              icon: const Icon(Icons.bug_report_outlined, size: 20),
              label: const Text('üî• Teste Direto (Debug)'),
            ),
          ),
        ],
      ),
    );
  }
}