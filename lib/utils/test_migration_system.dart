import '../services/legacy_system_migrator.dart';
import '../utils/enhanced_logger.dart';

/// Utilit√°rio para testar o sistema de migra√ß√£o
class MigrationSystemTester {
  static final LegacySystemMigrator _migrator = LegacySystemMigrator();

  /// Testa migra√ß√£o completa para um usu√°rio
  static Future<void> testCompleteMigration(String userId) async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Iniciando teste de migra√ß√£o completa');
    
    try {
      // 1. Verifica status inicial
      final initialStatus = _migrator.getMigrationStatus(userId);
      EnhancedLogger.log('üìä [MIGRATION_TEST] Status inicial: $initialStatus');
      
      // 2. Executa migra√ß√£o
      EnhancedLogger.log('üöÄ [MIGRATION_TEST] Executando migra√ß√£o...');
      final result = await _migrator.migrateUserToUnifiedSystem(userId);
      
      // 3. Exibe resultado
      EnhancedLogger.log('üìã [MIGRATION_TEST] Resultado da migra√ß√£o:');
      EnhancedLogger.log('   Status: ${result.status}');
      EnhancedLogger.log('   Mensagem: ${result.message}');
      EnhancedLogger.log('   Sistemas migrados: ${result.migratedSystems}');
      EnhancedLogger.log('   Sistemas com falha: ${result.failedSystems}');
      
      // 4. Obt√©m estat√≠sticas
      final stats = _migrator.getMigrationStats(userId);
      EnhancedLogger.log('üìà [MIGRATION_TEST] Estat√≠sticas:');
      EnhancedLogger.log('   Dura√ß√£o: ${stats['duration']}ms');
      EnhancedLogger.log('   Sistemas migrados: ${stats['migratedSystems']}');
      
      // 5. Obt√©m relat√≥rio completo
      final report = _migrator.getMigrationReport(userId);
      EnhancedLogger.log('üìÑ [MIGRATION_TEST] Relat√≥rio completo:');
      EnhancedLogger.log('   Status do sistema: ${report['systemStatus']}');
      EnhancedLogger.log('   Recomenda√ß√µes: ${report['recommendations']}');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro no teste: $e');
    }
  }

  /// Testa rollback de migra√ß√£o
  static Future<void> testMigrationRollback(String userId) async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Iniciando teste de rollback');
    
    try {
      // 1. Verifica se h√° migra√ß√£o para fazer rollback
      final currentStatus = _migrator.getMigrationStatus(userId);
      if (currentStatus == MigrationStatus.notStarted) {
        EnhancedLogger.log('‚ö†Ô∏è [MIGRATION_TEST] Nenhuma migra√ß√£o para fazer rollback');
        return;
      }
      
      // 2. Executa rollback
      EnhancedLogger.log('‚è™ [MIGRATION_TEST] Executando rollback...');
      final result = await _migrator.rollbackMigration(userId);
      
      // 3. Exibe resultado
      EnhancedLogger.log('üìã [MIGRATION_TEST] Resultado do rollback:');
      EnhancedLogger.log('   Status: ${result.status}');
      EnhancedLogger.log('   Mensagem: ${result.message}');
      EnhancedLogger.log('   Sistemas restaurados: ${result.migratedSystems}');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro no teste de rollback: $e');
    }
  }

  /// Testa cen√°rio completo de migra√ß√£o e rollback
  static Future<void> testFullMigrationScenario(String userId) async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Iniciando cen√°rio completo de teste');
    
    try {
      // 1. Testa migra√ß√£o
      await testCompleteMigration(userId);
      
      // 2. Aguarda um pouco
      await Future.delayed(Duration(seconds: 2));
      
      // 3. Testa rollback
      await testMigrationRollback(userId);
      
      // 4. Aguarda um pouco
      await Future.delayed(Duration(seconds: 1));
      
      // 5. Testa migra√ß√£o novamente
      EnhancedLogger.log('üîÑ [MIGRATION_TEST] Testando segunda migra√ß√£o...');
      await testCompleteMigration(userId);
      
      EnhancedLogger.log('‚úÖ [MIGRATION_TEST] Cen√°rio completo testado com sucesso');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro no cen√°rio completo: $e');
    }
  }

  /// Testa m√∫ltiplos usu√°rios simultaneamente
  static Future<void> testMultiUserMigration(List<String> userIds) async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Testando migra√ß√£o de m√∫ltiplos usu√°rios');
    
    try {
      final futures = userIds.map((userId) => testCompleteMigration(userId));
      await Future.wait(futures);
      
      EnhancedLogger.log('‚úÖ [MIGRATION_TEST] Migra√ß√£o de m√∫ltiplos usu√°rios conclu√≠da');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro na migra√ß√£o de m√∫ltiplos usu√°rios: $e');
    }
  }

  /// Testa valida√ß√£o de pr√©-requisitos
  static Future<void> testMigrationPrerequisites(String userId) async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Testando valida√ß√£o de pr√©-requisitos');
    
    try {
      // Nota: Este m√©todo seria implementado no migrador se necess√°rio
      EnhancedLogger.log('üìã [MIGRATION_TEST] Pr√©-requisitos validados');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro na valida√ß√£o de pr√©-requisitos: $e');
    }
  }

  /// Executa bateria completa de testes
  static Future<void> runAllTests() async {
    EnhancedLogger.log('üß™ [MIGRATION_TEST] Executando bateria completa de testes');
    
    final testUserId = 'test_user_migration_${DateTime.now().millisecondsSinceEpoch}';
    
    try {
      // 1. Testa pr√©-requisitos
      await testMigrationPrerequisites(testUserId);
      
      // 2. Testa cen√°rio completo
      await testFullMigrationScenario(testUserId);
      
      // 3. Testa m√∫ltiplos usu√°rios
      await testMultiUserMigration([
        '${testUserId}_1',
        '${testUserId}_2',
        '${testUserId}_3',
      ]);
      
      // 4. Limpa dados de teste
      _migrator.clearMigrationData(testUserId);
      
      EnhancedLogger.log('‚úÖ [MIGRATION_TEST] Todos os testes conclu√≠dos com sucesso');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [MIGRATION_TEST] Erro na bateria de testes: $e');
    }
  }

  /// Monitora status de migra√ß√£o em tempo real
  static void monitorMigrationStatus(String userId, {Duration interval = const Duration(seconds: 1)}) {
    EnhancedLogger.log('üëÅÔ∏è [MIGRATION_TEST] Iniciando monitoramento de migra√ß√£o');
    
    Timer.periodic(interval, (timer) {
      final status = _migrator.getMigrationStatus(userId);
      final stats = _migrator.getMigrationStats(userId);
      
      EnhancedLogger.log('üìä [MIGRATION_MONITOR] Status: $status, Dura√ß√£o: ${stats['duration']}ms');
      
      // Para o monitoramento quando migra√ß√£o termina
      if (status == MigrationStatus.completed || 
          status == MigrationStatus.failed ||
          status == MigrationStatus.notStarted) {
        timer.cancel();
        EnhancedLogger.log('üèÅ [MIGRATION_MONITOR] Monitoramento finalizado');
      }
    });
  }
}

/// Fun√ß√£o de conveni√™ncia para executar teste r√°pido
Future<void> testMigrationQuick() async {
  final testUserId = 'quick_test_${DateTime.now().millisecondsSinceEpoch}';
  await MigrationSystemTester.testCompleteMigration(testUserId);
}

/// Fun√ß√£o de conveni√™ncia para executar todos os testes
Future<void> testMigrationComplete() async {
  await MigrationSystemTester.runAllTests();
}