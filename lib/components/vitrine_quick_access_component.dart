import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../utils/vitrine_navigation_helper.dart';
import '../utils/enhanced_logger.dart';

/// Componente de acesso rápido à vitrine de propósito
class VitrineQuickAccessComponent extends StatelessWidget {\n  final bool showFullCard;\n  final bool showStatus;\n  final String? customTitle;\n  final String? customSubtitle;\n  \n  const VitrineQuickAccessComponent({\n    Key? key,\n    this.showFullCard = true,\n    this.showStatus = true,\n    this.customTitle,\n    this.customSubtitle,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    if (showFullCard) {\n      return _buildFullCard(context);\n    } else {\n      return _buildCompactButton(context);\n    }\n  }\n  \n  Widget _buildFullCard(BuildContext context) {\n    return Card(\n      elevation: 2,\n      margin: const EdgeInsets.all(16),\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Container(\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    color: Colors.blue[100],\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Icon(\n                    Icons.storefront,\n                    color: Colors.blue[700],\n                    size: 24,\n                  ),\n                ),\n                const SizedBox(width: 12),\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        customTitle ?? 'Vitrine de Propósito',\n                        style: const TextStyle(\n                          fontSize: 18,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 4),\n                      Text(\n                        customSubtitle ?? 'Compartilhe seu propósito com o mundo',\n                        style: TextStyle(\n                          fontSize: 14,\n                          color: Colors.grey[600],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            if (showStatus) ..[\n              _buildStatusIndicator(),\n              const SizedBox(height: 16),\n            ],\n            Row(\n              children: [\n                Expanded(\n                  child: ElevatedButton.icon(\n                    onPressed: () => _handleVitrineAccess(),\n                    icon: const Icon(Icons.visibility),\n                    label: const Text('Ver Minha Vitrine'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.blue[700],\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 12),\n                    ),\n                  ),\n                ),\n                const SizedBox(width: 12),\n                OutlinedButton.icon(\n                  onPressed: () => _handleVitrineSettings(),\n                  icon: const Icon(Icons.settings),\n                  label: const Text('Config'),\n                  style: OutlinedButton.styleFrom(\n                    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildCompactButton(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n      child: ElevatedButton.icon(\n        onPressed: () => _handleVitrineAccess(),\n        icon: const Icon(Icons.storefront),\n        label: Text(customTitle ?? 'Minha Vitrine'),\n        style: ElevatedButton.styleFrom(\n          backgroundColor: Colors.blue[700],\n          foregroundColor: Colors.white,\n          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),\n          minimumSize: const Size(double.infinity, 48),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildStatusIndicator() {\n    return FutureBuilder<String>(\n      future: VitrineNavigationHelper.getMyVitrineStatusText(),\n      builder: (context, snapshot) {\n        final status = snapshot.data ?? 'Carregando...';\n        final isActive = status.toLowerCase() == 'ativa';\n        \n        return Container(\n          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n          decoration: BoxDecoration(\n            color: isActive ? Colors.green[100] : Colors.grey[100],\n            borderRadius: BorderRadius.circular(16),\n            border: Border.all(\n              color: isActive ? Colors.green[300]! : Colors.grey[300]!,\n            ),\n          ),\n          child: Row(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              Icon(\n                isActive ? Icons.public : Icons.public_off,\n                size: 16,\n                color: isActive ? Colors.green[700] : Colors.grey[600],\n              ),\n              const SizedBox(width: 6),\n              Text(\n                'Status: $status',\n                style: TextStyle(\n                  fontSize: 12,\n                  fontWeight: FontWeight.w500,\n                  color: isActive ? Colors.green[700] : Colors.grey[600],\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n  \n  void _handleVitrineAccess() async {\n    try {\n      EnhancedLogger.info('User accessing vitrine from quick access', \n        tag: 'VITRINE_QUICK_ACCESS'\n      );\n      \n      await VitrineNavigationHelper.navigateToMyVitrine();\n    } catch (e, stackTrace) {\n      EnhancedLogger.error('Failed to access vitrine from quick access', \n        tag: 'VITRINE_QUICK_ACCESS',\n        error: e,\n        stackTrace: stackTrace\n      );\n    }\n  }\n  \n  void _handleVitrineSettings() async {\n    try {\n      EnhancedLogger.info('User accessing vitrine settings from quick access', \n        tag: 'VITRINE_QUICK_ACCESS'\n      );\n      \n      await VitrineNavigationHelper.navigateToVitrineSettings();\n    } catch (e, stackTrace) {\n      EnhancedLogger.error('Failed to access vitrine settings from quick access', \n        tag: 'VITRINE_QUICK_ACCESS',\n        error: e,\n        stackTrace: stackTrace\n      );\n    }\n  }\n}\n\n/// Componente compacto para uso em listas ou menus\nclass VitrineQuickAccessTile extends StatelessWidget {\n  final VoidCallback? onTap;\n  final bool showTrailing;\n  \n  const VitrineQuickAccessTile({\n    Key? key,\n    this.onTap,\n    this.showTrailing = true,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      leading: Container(\n        padding: const EdgeInsets.all(8),\n        decoration: BoxDecoration(\n          color: Colors.blue[100],\n          borderRadius: BorderRadius.circular(8),\n        ),\n        child: Icon(\n          Icons.storefront,\n          color: Colors.blue[700],\n          size: 20,\n        ),\n      ),\n      title: const Text('Vitrine de Propósito'),\n      subtitle: FutureBuilder<String>(\n        future: VitrineNavigationHelper.getMyVitrineStatusText(),\n        builder: (context, snapshot) {\n          return Text('Status: ${snapshot.data ?? 'Carregando...'}');\n        },\n      ),\n      trailing: showTrailing ? const Icon(Icons.arrow_forward_ios, size: 16) : null,\n      onTap: onTap ?? () => VitrineNavigationHelper.navigateToMyVitrine(),\n    );\n  }\n}\n\n/// Botão flutuante para acesso rápido à vitrine\nclass VitrineFloatingActionButton extends StatelessWidget {\n  final VoidCallback? onPressed;\n  final String? tooltip;\n  \n  const VitrineFloatingActionButton({\n    Key? key,\n    this.onPressed,\n    this.tooltip,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return FloatingActionButton.extended(\n      onPressed: onPressed ?? () => VitrineNavigationHelper.navigateToMyVitrine(),\n      icon: const Icon(Icons.storefront),\n      label: const Text('Vitrine'),\n      tooltip: tooltip ?? 'Acessar Vitrine de Propósito',\n      backgroundColor: Colors.blue[700],\n      foregroundColor: Colors.white,\n    );\n  }\n}\n\n/// Badge de notificação para vitrine (quando há atualizações)\nclass VitrineBadge extends StatelessWidget {\n  final Widget child;\n  final bool showBadge;\n  final String? badgeText;\n  \n  const VitrineBadge({\n    Key? key,\n    required this.child,\n    this.showBadge = false,\n    this.badgeText,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    if (!showBadge) return child;\n    \n    return Stack(\n      children: [\n        child,\n        Positioned(\n          right: 0,\n          top: 0,\n          child: Container(\n            padding: const EdgeInsets.all(4),\n            decoration: BoxDecoration(\n              color: Colors.red,\n              borderRadius: BorderRadius.circular(10),\n            ),\n            constraints: const BoxConstraints(\n              minWidth: 16,\n              minHeight: 16,\n            ),\n            child: Text(\n              badgeText ?? '',\n              style: const TextStyle(\n                color: Colors.white,\n                fontSize: 10,\n                fontWeight: FontWeight.bold,\n              ),\n              textAlign: TextAlign.center,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}