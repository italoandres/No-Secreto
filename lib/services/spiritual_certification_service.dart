import 'dart:io';
import 'package:file_picker/file_picker.dart';
import '../models/certification_request_model.dart';
import '../repositories/spiritual_certification_repository.dart';
import 'certification_file_upload_service.dart';
import 'certification_email_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

/// Resultado de opera√ß√£o
class OperationResult {
  final bool success;
  final String? message;
  final String? data;

  OperationResult.success({this.message, this.data})
      : success = true;

  OperationResult.error(this.message)
      : success = false,
        data = null;
}

/// Servi√ßo principal para gerenciar certifica√ß√µes espirituais
class SpiritualCertificationService {
  final SpiritualCertificationRepository _repository;
  final CertificationFileUploadService _uploadService;
  final CertificationEmailService _emailService;

  SpiritualCertificationService({
    SpiritualCertificationRepository? repository,
    CertificationFileUploadService? uploadService,
    CertificationEmailService? emailService,
  })  : _repository = repository ?? SpiritualCertificationRepository(),
        _uploadService = uploadService ?? CertificationFileUploadService(),
        _emailService = emailService ?? CertificationEmailService();

  /// Criar nova solicita√ß√£o de certifica√ß√£o
  Future<OperationResult> createCertificationRequest({
    required String userId,
    required String userName,
    required String userEmail,
    required String purchaseEmail,
    required PlatformFile proofFile,
    required Function(double) onUploadProgress,
  }) async {
    try {
      // 1. Verificar se j√° tem solicita√ß√£o pendente
      final hasPending = await _repository.hasPendingRequest(userId);
      if (hasPending) {
        return OperationResult.error(
          'Voc√™ j√° tem uma solicita√ß√£o pendente. Aguarde a aprova√ß√£o.',
        );
      }

      // 2. Fazer upload do arquivo
      final uploadResult = await _uploadService.uploadProofFile(
        userId: userId,
        file: proofFile,
        onProgress: onUploadProgress,
      );

      if (!uploadResult.success) {
        return OperationResult.error(uploadResult.error ?? 'Erro ao enviar arquivo');
      }

      // 3. Criar solicita√ß√£o no Firestore
      print('üîç [CERT_SERVICE] Criando solicita√ß√£o no Firestore...');
      
      final request = CertificationRequestModel(
        id: '', // Ser√° gerado pelo Firestore
        userId: userId,
        userName: userName,
        userEmail: userEmail,
        purchaseEmail: purchaseEmail,
        proofFileUrl: uploadResult.downloadUrl!,
        proofFileName: proofFile.name,
        status: CertificationStatus.pending,
        createdAt: DateTime.now(),
      );

      print('üìä [CERT_SERVICE] Request criado: userId=$userId, email=$userEmail');
      
      final requestId = await _repository.createRequest(request);
      
      print('‚úÖ [CERT_SERVICE] Solicita√ß√£o salva com ID: $requestId');

      // 4. Enviar email para admin
      try {
        await _emailService.sendNewRequestEmailToAdmin(
          requestId: requestId,
          userName: userName,
          userEmail: userEmail,
          purchaseEmail: purchaseEmail,
          proofFileUrl: uploadResult.downloadUrl!,
        );
      } catch (e) {
        // Email falhou mas solicita√ß√£o foi criada
        print('Erro ao enviar email: $e');
      }

      return OperationResult.success(
        message: 'Solicita√ß√£o enviada com sucesso! Voc√™ receber√° resposta em at√© 3 dias √∫teis.',
        data: requestId,
      );
    } catch (e) {
      return OperationResult.error('Erro ao criar solicita√ß√£o: $e');
    }
  }

  /// Buscar solicita√ß√µes do usu√°rio
  Future<List<CertificationRequestModel>> getUserRequests(String userId) async {
    try {
      return await _repository.getByUserId(userId);
    } catch (e) {
      throw Exception('Erro ao buscar solicita√ß√µes: $e');
    }
  }

  /// Buscar √∫ltima solicita√ß√£o do usu√°rio
  Future<CertificationRequestModel?> getLatestRequest(String userId) async {
    try {
      return await _repository.getLatestRequest(userId);
    } catch (e) {
      throw Exception('Erro ao buscar √∫ltima solicita√ß√£o: $e');
    }
  }

  /// Stream de solicita√ß√µes pendentes (admin)
  Stream<List<CertificationRequestModel>> getPendingRequests() {
    return _repository.getPendingRequests();
  }

  /// Aprovar certifica√ß√£o (admin)
  Future<OperationResult> approveCertification(
    String requestId,
    String adminEmail,
  ) async {
    try {
      // 1. Buscar solicita√ß√£o
      final request = await _repository.getById(requestId);
      if (request == null) {
        return OperationResult.error('Solicita√ß√£o n√£o encontrada');
      }

      // 2. Atualizar status da solicita√ß√£o
      await _repository.updateStatus(
        requestId,
        CertificationStatus.approved,
        reviewedBy: adminEmail,
      );

      // 3. Atualizar campo isSpiritualCertified do usu√°rio
      await _repository.updateUserCertificationStatus(
        request.userId,
        true,
      );

      // 4. Criar notifica√ß√£o in-app para o usu√°rio
      await _createApprovalNotification(request.userId, request.userName);

      // 5. Enviar email de aprova√ß√£o (opcional)
      try {
        await _emailService.sendApprovalEmailToUser(
          userEmail: request.userEmail,
          userName: request.userName,
        );
      } catch (e) {
        print('Erro ao enviar email de aprova√ß√£o: $e');
      }

      return OperationResult.success(
        message: 'Certifica√ß√£o aprovada com sucesso!',
      );
    } catch (e) {
      return OperationResult.error('Erro ao aprovar certifica√ß√£o: $e');
    }
  }

  /// Rejeitar certifica√ß√£o (admin)
  Future<OperationResult> rejectCertification(
    String requestId,
    String adminEmail, {
    String? reason,
  }) async {
    try {
      // 1. Buscar solicita√ß√£o
      final request = await _repository.getById(requestId);
      if (request == null) {
        return OperationResult.error('Solicita√ß√£o n√£o encontrada');
      }

      // 2. Atualizar status da solicita√ß√£o
      await _repository.updateStatus(
        requestId,
        CertificationStatus.rejected,
        reviewedBy: adminEmail,
        rejectionReason: reason,
      );

      // 3. Criar notifica√ß√£o in-app para o usu√°rio
      await _createRejectionNotification(
        request.userId,
        request.userName,
        reason,
      );

      // 4. Enviar email de rejei√ß√£o (opcional)
      try {
        await _emailService.sendRejectionEmailToUser(
          userEmail: request.userEmail,
          userName: request.userName,
          reason: reason,
        );
      } catch (e) {
        print('Erro ao enviar email de rejei√ß√£o: $e');
      }

      return OperationResult.success(
        message: 'Certifica√ß√£o rejeitada.',
      );
    } catch (e) {
      return OperationResult.error('Erro ao rejeitar certifica√ß√£o: $e');
    }
  }

  /// Criar notifica√ß√£o de aprova√ß√£o
  Future<void> _createApprovalNotification(
    String userId,
    String userName,
  ) async {
    try {
      await FirebaseFirestore.instance.collection('notifications').add({
        'userId': userId,
        'type': 'certification_approved',
        'title': 'Certifica√ß√£o Aprovada! üèÜ',
        'message': 'Parab√©ns! Sua certifica√ß√£o espiritual foi aprovada ‚úÖ',
        'read': false,
        'createdAt': FieldValue.serverTimestamp(),
        'data': {
          'action': 'open_certification',
        },
      });
    } catch (e) {
      print('Erro ao criar notifica√ß√£o de aprova√ß√£o: $e');
    }
  }

  /// Criar notifica√ß√£o de rejei√ß√£o
  Future<void> _createRejectionNotification(
    String userId,
    String userName,
    String? reason,
  ) async {
    try {
      final message = reason != null
          ? 'Sua solicita√ß√£o precisa de revis√£o: $reason'
          : 'Sua solicita√ß√£o de certifica√ß√£o precisa de revis√£o. Entre em contato conosco.';

      await FirebaseFirestore.instance.collection('notifications').add({
        'userId': userId,
        'type': 'certification_rejected',
        'title': 'Certifica√ß√£o - Revis√£o Necess√°ria',
        'message': message,
        'read': false,
        'createdAt': FieldValue.serverTimestamp(),
        'data': {
          'action': 'open_certification',
        },
      });
    } catch (e) {
      print('Erro ao criar notifica√ß√£o de rejei√ß√£o: $e');
    }
  }

  /// Verificar se usu√°rio pode solicitar certifica√ß√£o
  Future<bool> canRequestCertification(String userId) async {
    try {
      return !(await _repository.hasPendingRequest(userId));
    } catch (e) {
      return false;
    }
  }

  /// Contar solicita√ß√µes pendentes (admin)
  Future<int> countPendingRequests() async {
    try {
      return await _repository.countPendingRequests();
    } catch (e) {
      return 0;
    }
  }
}
