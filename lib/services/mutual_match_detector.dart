import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/notification_data.dart';
import 'notification_orchestrator.dart';
import 'chat_system_manager.dart';

/// Detector de matches m√∫tuos entre usu√°rios
/// Respons√°vel por identificar quando dois usu√°rios t√™m interesse m√∫tuo
/// e criar as notifica√ß√µes apropriadas para ambos
class MutualMatchDetector {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Verifica se existe match m√∫tuo entre dois usu√°rios
  /// Retorna true se ambos enviaram interesse um para o outro com status 'accepted'
  static Future<bool> checkMutualMatch(String userId1, String userId2) async {
    print('üîç [MUTUAL_MATCH_DETECTOR] Verificando match m√∫tuo entre $userId1 e $userId2');
    
    try {
      // Query 1: Verificar se userId1 enviou interesse para userId2 (status: accepted)
      final interest1to2 = await _firestore
          .collection('interests')
          .where('fromUserId', isEqualTo: userId1)
          .where('toUserId', isEqualTo: userId2)
          .where('status', isEqualTo: 'accepted')
          .get();
      
      print('üìä [MUTUAL_MATCH_DETECTOR] Interesse de $userId1 para $userId2: ${interest1to2.docs.length} documentos');
      
      // Query 2: Verificar se userId2 enviou interesse para userId1 (status: accepted)
      final interest2to1 = await _firestore
          .collection('interests')
          .where('fromUserId', isEqualTo: userId2)
          .where('toUserId', isEqualTo: userId1)
          .where('status', isEqualTo: 'accepted')
          .get();
      
      print('üìä [MUTUAL_MATCH_DETECTOR] Interesse de $userId2 para $userId1: ${interest2to1.docs.length} documentos');
      
      final hasMutualMatch = interest1to2.docs.isNotEmpty && interest2to1.docs.isNotEmpty;
      
      if (hasMutualMatch) {
        print('üéâ [MUTUAL_MATCH_DETECTOR] MATCH M√öTUO CONFIRMADO!');
      } else {
        print('‚ÑπÔ∏è [MUTUAL_MATCH_DETECTOR] Ainda n√£o h√° match m√∫tuo');
      }
      
      return hasMutualMatch;
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao verificar match m√∫tuo: $e');
      return false;
    }
  }

  /// Cria notifica√ß√µes de match m√∫tuo para AMBOS os usu√°rios
  /// Cria DUAS notifica√ß√µes separadas (uma para cada usu√°rio)
  static Future<void> createMutualMatchNotifications(String userId1, String userId2) async {
    print('üíï [MUTUAL_MATCH_DETECTOR] Criando notifica√ß√µes de match m√∫tuo');
    
    try {
      // Buscar dados dos usu√°rios
      final user1Data = await _getUserData(userId1);
      final user2Data = await _getUserData(userId2);
      
      if (user1Data == null || user2Data == null) {
        print('‚ùå [MUTUAL_MATCH_DETECTOR] Dados de usu√°rio n√£o encontrados');
        return;
      }
      
      // Gerar chatId determin√≠stico
      final chatId = _generateChatId(userId1, userId2);
      
      print('üìù [MUTUAL_MATCH_DETECTOR] ChatId gerado: $chatId');
      
      // Notifica√ß√£o 1: Para userId1
      final notification1 = NotificationData(
        id: '',
        toUserId: userId1,
        fromUserId: userId2,
        fromUserName: user2Data['nome'] ?? 'Usu√°rio',
        fromUserEmail: user2Data['email'] ?? '',
        type: 'mutual_match',  // IMPORTANTE: tipo correto
        message: 'MATCH M√öTUO! üéâ Voc√™s t√™m interesse m√∫tuo!',
        status: 'new',
        createdAt: DateTime.now(),
        metadata: {
          'chatId': chatId,
          'matchType': 'mutual',
          'otherUserId': userId2,
        },
      );
      
      // Notifica√ß√£o 2: Para userId2
      final notification2 = NotificationData(
        id: '',
        toUserId: userId2,
        fromUserId: userId1,
        fromUserName: user1Data['nome'] ?? 'Usu√°rio',
        fromUserEmail: user1Data['email'] ?? '',
        type: 'mutual_match',  // IMPORTANTE: tipo correto
        message: 'MATCH M√öTUO! üéâ Voc√™s t√™m interesse m√∫tuo!',
        status: 'new',
        createdAt: DateTime.now(),
        metadata: {
          'chatId': chatId,
          'matchType': 'mutual',
          'otherUserId': userId1,
        },
      );
      
      // Criar ambas as notifica√ß√µes
      print('üì§ [MUTUAL_MATCH_DETECTOR] Criando notifica√ß√£o para $userId1');
      await NotificationOrchestrator.createNotification(notification1);
      
      print('üì§ [MUTUAL_MATCH_DETECTOR] Criando notifica√ß√£o para $userId2');
      await NotificationOrchestrator.createNotification(notification2);
      
      print('‚úÖ [MUTUAL_MATCH_DETECTOR] Notifica√ß√µes de match m√∫tuo criadas com sucesso');
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao criar notifica√ß√µes: $e');
      throw Exception('Erro ao criar notifica√ß√µes de match m√∫tuo: $e');
    }
  }

  /// Cria o chat automaticamente e marca o match como processado
  static Future<String> triggerChatCreation(String userId1, String userId2) async {
    print('üí¨ [MUTUAL_MATCH_DETECTOR] Criando chat para match m√∫tuo');
    
    try {
      // Gerar chatId determin√≠stico
      final chatId = _generateChatId(userId1, userId2);
      
      // Criar chat atrav√©s do ChatSystemManager
      await ChatSystemManager.createChat(userId1, userId2);
      
      print('‚úÖ [MUTUAL_MATCH_DETECTOR] Chat criado: $chatId');
      
      // Criar documento na cole√ß√£o mutual_matches para marcar como processado
      await _firestore.collection('mutual_matches').doc(chatId).set({
        'matchId': chatId,
        'participants': [userId1, userId2],
        'createdAt': Timestamp.now(),
        'chatId': chatId,
        'notificationsCreated': true,
        'chatCreated': true,
      });
      
      print('‚úÖ [MUTUAL_MATCH_DETECTOR] Match marcado como processado');
      
      return chatId;
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao criar chat: $e');
      throw Exception('Erro ao criar chat: $e');
    }
  }

  /// Verifica se o match j√° foi processado anteriormente
  /// Previne cria√ß√£o de notifica√ß√µes duplicadas
  static Future<bool> isMatchAlreadyProcessed(String userId1, String userId2) async {
    try {
      final matchId = _generateChatId(userId1, userId2);
      final doc = await _firestore.collection('mutual_matches').doc(matchId).get();
      
      final exists = doc.exists;
      
      if (exists) {
        print('‚ÑπÔ∏è [MUTUAL_MATCH_DETECTOR] Match j√° foi processado: $matchId');
      }
      
      return exists;
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao verificar se match foi processado: $e');
      return false;
    }
  }

  /// Obt√©m todos os matches m√∫tuos de um usu√°rio
  static Future<List<Map<String, dynamic>>> getUserMutualMatches(String userId) async {
    print('üìã [MUTUAL_MATCH_DETECTOR] Buscando matches m√∫tuos para $userId');
    
    try {
      final matches = await _firestore
          .collection('mutual_matches')
          .where('participants', arrayContains: userId)
          .get();
      
      final matchList = matches.docs.map((doc) {
        return {
          'id': doc.id,
          ...doc.data(),
        };
      }).toList();
      
      print('‚úÖ [MUTUAL_MATCH_DETECTOR] ${matchList.length} matches m√∫tuos encontrados');
      
      return matchList;
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao buscar matches m√∫tuos: $e');
      return [];
    }
  }

  /// Gera um chatId determin√≠stico baseado nos IDs dos usu√°rios
  /// Garante que o mesmo par de usu√°rios sempre gera o mesmo chatId
  static String _generateChatId(String userId1, String userId2) {
    // Ordenar IDs alfabeticamente para garantir consist√™ncia
    final sortedIds = [userId1, userId2]..sort();
    return 'match_${sortedIds[0]}_${sortedIds[1]}';
  }

  /// Busca dados do usu√°rio no Firestore
  static Future<Map<String, dynamic>?> _getUserData(String userId) async {
    try {
      // Tentar na cole√ß√£o usuarios primeiro
      final userDoc = await _firestore
          .collection('usuarios')
          .doc(userId)
          .get();
      
      if (userDoc.exists) {
        return userDoc.data();
      }
      
      // Fallback para cole√ß√£o users
      final fallbackDoc = await _firestore
          .collection('users')
          .doc(userId)
          .get();
      
      return fallbackDoc.exists ? fallbackDoc.data() : null;
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro ao buscar dados do usu√°rio $userId: $e');
      return null;
    }
  }

  /// Testa o detector de matches m√∫tuos
  static Future<void> testMutualMatchDetector() async {
    print('üß™ [MUTUAL_MATCH_DETECTOR] Testando detector de matches m√∫tuos...');
    
    try {
      const testUserId1 = 'test_user_1';
      const testUserId2 = 'test_user_2';
      
      // Teste 1: Verificar match m√∫tuo
      final hasMutualMatch = await checkMutualMatch(testUserId1, testUserId2);
      print('‚úÖ Teste 1 - Verifica√ß√£o de match m√∫tuo: $hasMutualMatch');
      
      // Teste 2: Verificar se j√° foi processado
      final alreadyProcessed = await isMatchAlreadyProcessed(testUserId1, testUserId2);
      print('‚úÖ Teste 2 - Match j√° processado: $alreadyProcessed');
      
      // Teste 3: Gerar chatId
      final chatId = _generateChatId(testUserId1, testUserId2);
      print('‚úÖ Teste 3 - ChatId gerado: $chatId');
      
      // Teste 4: Buscar matches do usu√°rio
      final matches = await getUserMutualMatches(testUserId1);
      print('‚úÖ Teste 4 - Matches encontrados: ${matches.length}');
      
      print('üéâ [MUTUAL_MATCH_DETECTOR] Todos os testes passaram!');
      
    } catch (e) {
      print('‚ùå [MUTUAL_MATCH_DETECTOR] Erro nos testes: $e');
    }
  }
}
