/// Servi√ßo para envio de emails relacionados √† certifica√ß√£o espiritual
/// NOTA: Cloud Functions n√£o est√° dispon√≠vel - emails ser√£o enviados via backend alternativo
class CertificationEmailService {
  static const String _adminEmail = 'sinais.aplicativo@gmail.com';

  /// Enviar email para admin quando h√° nova solicita√ß√£o
  Future<void> sendNewRequestEmailToAdmin({
    required String requestId,
    required String userName,
    required String userEmail,
    required String purchaseEmail,
    required String proofFileUrl,
  }) async {
    try {
      // TODO: Implementar envio de email via backend alternativo
      // Por enquanto, apenas log
      print('üìß Email para admin: Nova solicita√ß√£o de $userName');
      print('   Request ID: $requestId');
      print('   Email: $userEmail');
      print('   Email compra: $purchaseEmail');
      print('   Comprovante: $proofFileUrl');
    } catch (e) {
      print('Erro ao enviar email para admin: $e');
      // N√£o propagar erro - email √© opcional
    }
  }

  /// Enviar email de aprova√ß√£o para o usu√°rio
  Future<void> sendApprovalEmailToUser({
    required String userEmail,
    required String userName,
  }) async {
    try {
      // TODO: Implementar envio de email via backend alternativo
      print('üìß Email de aprova√ß√£o para: $userName ($userEmail)');
    } catch (e) {
      print('Erro ao enviar email de aprova√ß√£o: $e');
      // N√£o propagar erro - email √© opcional
    }
  }

  /// Enviar email de rejei√ß√£o para o usu√°rio
  Future<void> sendRejectionEmailToUser({
    required String userEmail,
    required String userName,
    String? reason,
  }) async {
    try {
      // TODO: Implementar envio de email via backend alternativo
      print('üìß Email de rejei√ß√£o para: $userName ($userEmail)');
      print('   Motivo: ${reason ?? "N√£o especificado"}');
    } catch (e) {
      print('Erro ao enviar email de rejei√ß√£o: $e');
      // N√£o propagar erro - email √© opcional
    }
  }
}
