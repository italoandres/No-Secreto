import 'package:firebase_auth/firebase_auth.dart';
import 'mutual_match_detector.dart';
import 'notification_orchestrator.dart';
import 'chat_system_manager.dart';
import 'real_time_notification_service.dart';
import 'enhanced_interest_handler.dart';
import 'message_notification_system.dart';

/// Integrador principal que conecta todos os servi√ßos do fluxo de matches
class MatchFlowIntegrator {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static bool _isInitialized = false;

  /// Inicializa todo o sistema de matches e notifica√ß√µes
  static Future<void> initialize() async {
    if (_isInitialized) {
      print('‚ÑπÔ∏è [MATCH_FLOW_INTEGRATOR] Sistema j√° inicializado');
      return;
    }

    print('üöÄ [MATCH_FLOW_INTEGRATOR] Inicializando sistema completo...');
    
    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Usu√°rio n√£o autenticado');
      return;
    }

    try {
      // Inicializar servi√ßos em ordem de depend√™ncia
      await RealTimeNotificationService.initialize();
      await MessageNotificationSystem.initialize();
      
      _isInitialized = true;
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Sistema completo inicializado');
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro na inicializa√ß√£o: $e');
      _isInitialized = false;
    }
  }

  /// Para todo o sistema e limpa recursos
  static Future<void> dispose() async {
    if (!_isInitialized) return;
    
    print('üõë [MATCH_FLOW_INTEGRATOR] Parando sistema completo...');
    
    try {
      await RealTimeNotificationService.dispose();
      await MessageNotificationSystem.dispose();
      
      _isInitialized = false;
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Sistema completo parado');
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro ao parar sistema: $e');
    }
  }

  /// Fluxo completo: enviar interesse
  static Future<String?> sendInterest({
    required String toUserId,
    required String message,
    Map<String, dynamic>? metadata,
  }) async {
    print('üíï [MATCH_FLOW_INTEGRATOR] Iniciando fluxo de interesse');
    
    try {
      // Verificar se j√° existe interesse
      final currentUser = _auth.currentUser;
      if (currentUser == null) return null;
      
      final existingInterest = await EnhancedInterestHandler.checkExistingInterest(
        currentUser.uid, 
        toUserId,
      );
      
      if (existingInterest != null) {
        print('‚ÑπÔ∏è [MATCH_FLOW_INTEGRATOR] Interesse j√° existe: ${existingInterest['status']}');
        return existingInterest['id'];
      }
      
      // Enviar interesse
      final interestId = await EnhancedInterestHandler.sendInterest(
        toUserId: toUserId,
        message: message,
        metadata: metadata,
      );
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Fluxo de interesse conclu√≠do: $interestId');
      return interestId;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro no fluxo de interesse: $e');
      return null;
    }
  }

  /// Fluxo completo: responder interesse
  static Future<bool> respondToInterest({
    required String notificationId,
    required String interestId,
    required String action,
    String? responseMessage,
  }) async {
    print('üîÑ [MATCH_FLOW_INTEGRATOR] Iniciando fluxo de resposta: $action');
    
    try {
      // Processar resposta atrav√©s do handler
      await EnhancedInterestHandler.respondToInterest(
        notificationId: notificationId,
        interestId: interestId,
        action: action,
        responseMessage: responseMessage,
      );
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Fluxo de resposta conclu√≠do');
      return true;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro no fluxo de resposta: $e');
      return false;
    }
  }

  /// Fluxo completo: enviar mensagem
  static Future<bool> sendMessage({
    required String chatId,
    required String message,
    String messageType = 'text',
  }) async {
    print('üì§ [MATCH_FLOW_INTEGRATOR] Iniciando fluxo de mensagem');
    
    try {
      // Enviar mensagem com notifica√ß√µes
      await MessageNotificationSystem.sendMessageWithNotification(
        chatId: chatId,
        message: message,
        messageType: messageType,
      );
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Fluxo de mensagem conclu√≠do');
      return true;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro no fluxo de mensagem: $e');
      return false;
    }
  }

  /// Fluxo completo: abrir chat
  static Future<bool> openChat({
    required String chatId,
    String? otherUserId,
  }) async {
    print('üí¨ [MATCH_FLOW_INTEGRATOR] Iniciando fluxo de abertura de chat');
    
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) return false;
      
      // Garantir que o chat existe
      await ChatSystemManager.ensureChatExists(chatId);
      
      // Marcar mensagens como lidas
      await MessageNotificationSystem.markMessagesAsReadAndClearNotifications(
        chatId: chatId,
        userId: currentUser.uid,
      );
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Fluxo de abertura de chat conclu√≠do');
      return true;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro no fluxo de abertura de chat: $e');
      return false;
    }
  }

  /// Obt√©m estat√≠sticas completas do usu√°rio
  static Future<Map<String, dynamic>> getUserStats() async {
    print('üìä [MATCH_FLOW_INTEGRATOR] Obtendo estat√≠sticas do usu√°rio');
    
    final currentUser = _auth.currentUser;
    if (currentUser == null) return {};
    
    try {
      // Buscar estat√≠sticas de diferentes servi√ßos
      final interestStats = await EnhancedInterestHandler.getInterestStats(currentUser.uid);
      final notificationStats = await NotificationOrchestrator.getNotificationStats(currentUser.uid);
      final unreadMessages = await MessageNotificationSystem.getUnreadMessageCount(currentUser.uid);
      final mutualMatches = await MutualMatchDetector.getUserMutualMatches(currentUser.uid);
      
      final stats = {
        'interests': interestStats,
        'notifications': notificationStats,
        'unreadMessages': unreadMessages,
        'mutualMatches': mutualMatches.length,
        'lastUpdated': DateTime.now().toIso8601String(),
      };
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Estat√≠sticas obtidas');
      return stats;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro ao obter estat√≠sticas: $e');
      return {};
    }
  }

  /// Executa limpeza de dados antigos
  static Future<void> performMaintenance() async {
    print('üßπ [MATCH_FLOW_INTEGRATOR] Executando manuten√ß√£o do sistema');
    
    try {
      // Executar limpezas em paralelo
      await Future.wait([
        NotificationOrchestrator.cleanupOldNotifications(),
        EnhancedInterestHandler.cleanupOldInterests(),
        MessageNotificationSystem.cleanupOldMessageNotifications(),
      ]);
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Manuten√ß√£o conclu√≠da');
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro na manuten√ß√£o: $e');
    }
  }

  /// Verifica sa√∫de do sistema
  static Future<Map<String, bool>> checkSystemHealth() async {
    print('üè• [MATCH_FLOW_INTEGRATOR] Verificando sa√∫de do sistema');
    
    final health = <String, bool>{
      'initialized': _isInitialized,
      'userAuthenticated': _auth.currentUser != null,
      'realTimeService': false,
      'messageService': false,
    };
    
    try {
      // Verificar servi√ßos individuais
      if (_auth.currentUser != null) {
        // Testar notifica√ß√µes em tempo real
        final unreadCount = await NotificationOrchestrator.getUnreadCount(_auth.currentUser!.uid);
        health['realTimeService'] = unreadCount >= 0;
        
        // Testar sistema de mensagens
        final messageCount = await MessageNotificationSystem.getUnreadMessageCount(_auth.currentUser!.uid);
        health['messageService'] = messageCount >= 0;
      }
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Verifica√ß√£o de sa√∫de conclu√≠da: $health');
      return health;
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro na verifica√ß√£o de sa√∫de: $e');
      return health;
    }
  }

  /// For√ßa sincroniza√ß√£o de todos os dados
  static Future<void> forceSynchronization() async {
    print('üîÑ [MATCH_FLOW_INTEGRATOR] For√ßando sincroniza√ß√£o');
    
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) return;
      
      // Reinicializar servi√ßos
      await dispose();
      await initialize();
      
      print('‚úÖ [MATCH_FLOW_INTEGRATOR] Sincroniza√ß√£o for√ßada conclu√≠da');
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro na sincroniza√ß√£o for√ßada: $e');
    }
  }

  /// Testa todo o sistema integrado
  static Future<void> testCompleteSystem() async {
    print('üß™ [MATCH_FLOW_INTEGRATOR] Testando sistema completo...');
    
    try {
      // Teste 1: Inicializa√ß√£o
      await initialize();
      print('‚úÖ Teste 1 - Inicializa√ß√£o');
      
      // Teste 2: Verificar sa√∫de
      final health = await checkSystemHealth();
      print('‚úÖ Teste 2 - Sa√∫de do sistema: $health');
      
      // Teste 3: Obter estat√≠sticas
      final stats = await getUserStats();
      print('‚úÖ Teste 3 - Estat√≠sticas: ${stats.keys}');
      
      // Teste 4: Executar manuten√ß√£o
      await performMaintenance();
      print('‚úÖ Teste 4 - Manuten√ß√£o');
      
      print('üéâ [MATCH_FLOW_INTEGRATOR] Todos os testes do sistema passaram!');
      
    } catch (e) {
      print('‚ùå [MATCH_FLOW_INTEGRATOR] Erro nos testes do sistema: $e');
    }
  }

  /// Verifica se o sistema est√° inicializado
  static bool get isInitialized => _isInitialized;

  /// Obt√©m status atual do sistema
  static Map<String, dynamic> get systemStatus => {
    'initialized': _isInitialized,
    'userAuthenticated': _auth.currentUser != null,
    'userId': _auth.currentUser?.uid,
    'timestamp': DateTime.now().toIso8601String(),
  };
}