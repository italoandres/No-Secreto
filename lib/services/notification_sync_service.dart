import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../utils/enhanced_logger.dart';
import '../services/offline_notification_cache.dart';
import '../services/notification_fallback_system.dart';
import '../services/fixed_notification_pipeline.dart';
import '../services/error_recovery_system.dart';
import '../models/real_notification_model.dart';

/// Servi√ßo de sincroniza√ß√£o de notifica√ß√µes quando conectividade retorna
class NotificationSyncService {
  static NotificationSyncService? _instance;
  static NotificationSyncService get instance => 
      _instance ??= NotificationSyncService._();
  
  NotificationSyncService._();
  
  bool _isInitialized = false;
  bool _isSyncing = false;
  StreamSubscription<ConnectivityResult>? _connectivitySubscription;
  Timer? _syncTimer;
  
  final List<String> _syncLog = [];
  final Map<String, dynamic> _syncStatistics = {};
  final Set<String> _usersToSync = {};
  
  // Configura√ß√µes de sincroniza√ß√£o
  final Duration _syncInterval = const Duration(minutes: 5);
  final Duration _syncTimeout = const Duration(minutes: 2);
  final int _maxRetries = 3;
  
  /// Inicializa servi√ßo de sincroniza√ß√£o
  Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      // Inicializar depend√™ncias
      await OfflineNotificationCache.instance.initialize();
      await NotificationFallbackSystem.instance.initialize();
      
      // Monitorar conectividade
      final connectivity = Connectivity();
      _connectivitySubscription = connectivity.onConnectivityChanged.listen(_onConnectivityChanged);
      
      // Configurar timer de sincroniza√ß√£o peri√≥dica
      _setupPeriodicSync();
      
      // Inicializar estat√≠sticas
      _initializeStatistics();
      
      _isInitialized = true;
      
      EnhancedLogger.success('‚úÖ [SYNC_SERVICE] Servi√ßo de sincroniza√ß√£o inicializado');
      _logSync('Servi√ßo de sincroniza√ß√£o inicializado com sucesso');
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_SERVICE] Erro ao inicializar servi√ßo', error: e);
      _logSync('Erro ao inicializar servi√ßo: $e');
    }
  }
  
  /// Manipula mudan√ßas de conectividade
  void _onConnectivityChanged(ConnectivityResult result) {
    final isOnline = result != ConnectivityResult.none;
    
    _logSync('Conectividade alterada: ${result.toString()} (Online: $isOnline)');
    
    if (isOnline && !_isSyncing) {
      _logSync('Conectividade restaurada - iniciando sincroniza√ß√£o autom√°tica');
      _scheduleImmediateSync();
    }
  }
  
  /// Configura sincroniza√ß√£o peri√≥dica
  void _setupPeriodicSync() {
    _syncTimer = Timer.periodic(_syncInterval, (timer) {
      if (!_isSyncing) {
        _performPeriodicSync();
      }
    });
    
    _logSync('Sincroniza√ß√£o peri√≥dica configurada (${_syncInterval.inMinutes} minutos)');
  }
  
  /// Executa sincroniza√ß√£o peri√≥dica
  void _performPeriodicSync() async {
    try {
      final connectivity = Connectivity();
      final connectivityResult = await connectivity.checkConnectivity();
      
      if (connectivityResult != ConnectivityResult.none) {
        _logSync('Executando sincroniza√ß√£o peri√≥dica');
        await performFullSync();
      } else {
        _logSync('Sincroniza√ß√£o peri√≥dica cancelada - sem conectividade');
      }
      
    } catch (e) {
      _logSync('Erro na sincroniza√ß√£o peri√≥dica: $e');
    }
  }
  
  /// Agenda sincroniza√ß√£o imediata
  void _scheduleImmediateSync() {
    Timer(const Duration(seconds: 2), () async {
      await performFullSync();
    });
  }
  
  /// Executa sincroniza√ß√£o completa
  Future<bool> performFullSync() async {
    if (_isSyncing) {
      _logSync('Sincroniza√ß√£o j√° em andamento - ignorando nova solicita√ß√£o');
      return false;
    }
    
    _isSyncing = true;
    _logSync('üîÑ Iniciando sincroniza√ß√£o completa');
    
    try {
      final syncStartTime = DateTime.now();
      
      // Verificar conectividade
      final connectivity = Connectivity();
      final connectivityResult = await connectivity.checkConnectivity();
      
      if (connectivityResult == ConnectivityResult.none) {
        _logSync('‚ùå Sincroniza√ß√£o cancelada - sem conectividade');
        return false;
      }
      
      // Etapa 1: Sincronizar dados em cache
      _logSync('üì¶ Etapa 1: Sincronizando dados em cache');
      final cacheResult = await _syncCachedData();
      
      // Etapa 2: Sincronizar opera√ß√µes pendentes
      _logSync('üìù Etapa 2: Sincronizando opera√ß√µes pendentes');
      final operationsResult = await _syncPendingOperations();
      
      // Etapa 3: Atualizar notifica√ß√µes para usu√°rios pendentes
      _logSync('üîî Etapa 3: Atualizando notifica√ß√µes pendentes');
      final notificationsResult = await _syncPendingNotifications();
      
      // Etapa 4: Limpar dados expirados
      _logSync('üßπ Etapa 4: Limpando dados expirados');
      await _cleanExpiredData();
      
      final syncEndTime = DateTime.now();
      final syncDuration = syncEndTime.difference(syncStartTime);
      
      // Atualizar estat√≠sticas
      _updateSyncStatistics(true, syncDuration, cacheResult, operationsResult, notificationsResult);
      
      _logSync('‚úÖ Sincroniza√ß√£o completa conclu√≠da em ${syncDuration.inMilliseconds}ms');
      
      return true;
      
    } catch (e) {
      _logSync('üí• Erro na sincroniza√ß√£o completa: $e');
      _updateSyncStatistics(false, Duration.zero, false, false, false);
      
      EnhancedLogger.error('‚ùå [SYNC_SERVICE] Erro na sincroniza√ß√£o completa', error: e);
      return false;
      
    } finally {
      _isSyncing = false;
    }
  }
  
  /// Sincroniza dados em cache
  Future<bool> _syncCachedData() async {
    try {
      final cacheStats = OfflineNotificationCache.instance.getCacheStatistics();
      final cachedUsers = cacheStats['cachedNotifications'] as int? ?? 0;
      
      if (cachedUsers == 0) {
        _logSync('  üì¶ Nenhum dado em cache para sincronizar');
        return true;
      }
      
      _logSync('  üì¶ Sincronizando dados de $cachedUsers usu√°rios');
      
      // Aqui voc√™ implementaria a l√≥gica espec√≠fica de sincroniza√ß√£o
      // Por exemplo: comparar com dados do servidor, resolver conflitos, etc.
      
      await Future.delayed(const Duration(milliseconds: 500)); // Simular sincroniza√ß√£o
      
      _logSync('  ‚úÖ Dados em cache sincronizados com sucesso');
      return true;
      
    } catch (e) {
      _logSync('  ‚ùå Erro ao sincronizar dados em cache: $e');
      return false;
    }
  }
  
  /// Sincroniza opera√ß√µes pendentes
  Future<bool> _syncPendingOperations() async {
    try {
      // Obter estat√≠sticas do cache offline
      final cacheStats = OfflineNotificationCache.instance.getCacheStatistics();
      final pendingOps = cacheStats['pendingOperations'] as int? ?? 0;
      
      if (pendingOps == 0) {
        _logSync('  üìù Nenhuma opera√ß√£o pendente para sincronizar');
        return true;
      }
      
      _logSync('  üìù Sincronizando $pendingOps opera√ß√µes pendentes');
      
      // Aqui voc√™ implementaria a l√≥gica de sincroniza√ß√£o de opera√ß√µes
      // Por exemplo: enviar para Firebase, processar filas, etc.
      
      await Future.delayed(const Duration(milliseconds: 300)); // Simular sincroniza√ß√£o
      
      _logSync('  ‚úÖ Opera√ß√µes pendentes sincronizadas com sucesso');
      return true;
      
    } catch (e) {
      _logSync('  ‚ùå Erro ao sincronizar opera√ß√µes pendentes: $e');
      return false;
    }
  }
  
  /// Sincroniza notifica√ß√µes pendentes
  Future<bool> _syncPendingNotifications() async {
    try {
      if (_usersToSync.isEmpty) {
        _logSync('  üîî Nenhuma notifica√ß√£o pendente para sincronizar');
        return true;
      }
      
      _logSync('  üîî Sincronizando notifica√ß√µes para ${_usersToSync.length} usu√°rios');
      
      final syncedUsers = <String>[];
      
      for (final userId in _usersToSync) {
        try {
          // Processar notifica√ß√µes atualizadas para o usu√°rio
          final notifications = await FixedNotificationPipeline.instance
              .processInteractionsRobustly(userId);
          
          // Salvar no cache
          await OfflineNotificationCache.instance.cacheNotifications(userId, notifications);
          
          // Salvar no fallback
          await NotificationFallbackSystem.instance.saveFallbackNotifications(userId, notifications);
          
          syncedUsers.add(userId);
          _logSync('    ‚úÖ Usu√°rio $userId sincronizado (${notifications.length} notifica√ß√µes)');
          
        } catch (e) {
          _logSync('    ‚ùå Erro ao sincronizar usu√°rio $userId: $e');
        }
      }
      
      // Remover usu√°rios sincronizados da lista
      for (final userId in syncedUsers) {
        _usersToSync.remove(userId);
      }
      
      _logSync('  ‚úÖ ${syncedUsers.length} usu√°rios sincronizados com sucesso');
      return syncedUsers.isNotEmpty;
      
    } catch (e) {
      _logSync('  ‚ùå Erro ao sincronizar notifica√ß√µes pendentes: $e');
      return false;
    }
  }
  
  /// Limpa dados expirados
  Future<void> _cleanExpiredData() async {
    try {
      // Limpar cache offline expirado
      await OfflineNotificationCache.instance.cleanExpiredCache();
      
      // Limpar cache de fallback expirado
      await NotificationFallbackSystem.instance.cleanExpiredCache();
      
      _logSync('  üßπ Dados expirados limpos com sucesso');
      
    } catch (e) {
      _logSync('  ‚ùå Erro ao limpar dados expirados: $e');
    }
  }
  
  /// Adiciona usu√°rio √† lista de sincroniza√ß√£o
  void addUserToSync(String userId) {
    _usersToSync.add(userId);
    _logSync('Usu√°rio $userId adicionado √† lista de sincroniza√ß√£o');
    
    // Se estiver online e n√£o sincronizando, agendar sincroniza√ß√£o
    if (OfflineNotificationCache.instance.isOnline && !_isSyncing) {
      Timer(const Duration(seconds: 5), () async {
        await performFullSync();
      });
    }
  }
  
  /// For√ßa sincroniza√ß√£o para um usu√°rio espec√≠fico
  Future<bool> forceSyncUser(String userId) async {
    if (_isSyncing) {
      _logSync('Sincroniza√ß√£o em andamento - adicionando $userId √† fila');
      addUserToSync(userId);
      return false;
    }
    
    try {
      _isSyncing = true;
      _logSync('üîÑ For√ßando sincroniza√ß√£o para usu√°rio $userId');
      
      // Verificar conectividade
      final connectivity = Connectivity();
      final connectivityResult = await connectivity.checkConnectivity();
      
      if (connectivityResult == ConnectivityResult.none) {
        _logSync('‚ùå Sincroniza√ß√£o cancelada - sem conectividade');
        return false;
      }
      
      // Processar notifica√ß√µes para o usu√°rio
      final notifications = await FixedNotificationPipeline.instance
          .processInteractionsRobustly(userId);
      
      // Salvar nos caches
      await OfflineNotificationCache.instance.cacheNotifications(userId, notifications);
      await NotificationFallbackSystem.instance.saveFallbackNotifications(userId, notifications);
      
      _logSync('‚úÖ Usu√°rio $userId sincronizado com sucesso (${notifications.length} notifica√ß√µes)');
      return true;
      
    } catch (e) {
      _logSync('üí• Erro ao for√ßar sincroniza√ß√£o do usu√°rio $userId: $e');
      return false;
      
    } finally {
      _isSyncing = false;
    }
  }
  
  /// Inicializa estat√≠sticas
  void _initializeStatistics() {
    _syncStatistics.clear();
    _syncStatistics.addAll({
      'totalSyncs': 0,
      'successfulSyncs': 0,
      'failedSyncs': 0,
      'lastSyncTime': null,
      'lastSyncDuration': 0,
      'averageSyncDuration': 0,
      'totalSyncTime': 0,
      'usersInQueue': 0,
      'cacheDataSynced': 0,
      'operationsSynced': 0,
      'notificationsSynced': 0,
    });
  }
  
  /// Atualiza estat√≠sticas de sincroniza√ß√£o
  void _updateSyncStatistics(bool success, Duration duration, bool cacheResult, bool operationsResult, bool notificationsResult) {
    _syncStatistics['totalSyncs'] = (_syncStatistics['totalSyncs'] as int) + 1;
    
    if (success) {
      _syncStatistics['successfulSyncs'] = (_syncStatistics['successfulSyncs'] as int) + 1;
    } else {
      _syncStatistics['failedSyncs'] = (_syncStatistics['failedSyncs'] as int) + 1;
    }
    
    _syncStatistics['lastSyncTime'] = DateTime.now().toIso8601String();
    _syncStatistics['lastSyncDuration'] = duration.inMilliseconds;
    
    final totalTime = (_syncStatistics['totalSyncTime'] as int) + duration.inMilliseconds;
    _syncStatistics['totalSyncTime'] = totalTime;
    
    final totalSyncs = _syncStatistics['totalSyncs'] as int;
    _syncStatistics['averageSyncDuration'] = totalSyncs > 0 ? (totalTime / totalSyncs).round() : 0;
    
    _syncStatistics['usersInQueue'] = _usersToSync.length;
    
    if (cacheResult) _syncStatistics['cacheDataSynced'] = (_syncStatistics['cacheDataSynced'] as int) + 1;
    if (operationsResult) _syncStatistics['operationsSynced'] = (_syncStatistics['operationsSynced'] as int) + 1;
    if (notificationsResult) _syncStatistics['notificationsSynced'] = (_syncStatistics['notificationsSynced'] as int) + 1;
  }
  
  /// Obt√©m estat√≠sticas de sincroniza√ß√£o
  Map<String, dynamic> getSyncStatistics() {
    return {
      'isInitialized': _isInitialized,
      'isSyncing': _isSyncing,
      'usersInQueue': _usersToSync.length,
      'syncInterval': _syncInterval.inMinutes,
      'syncTimeout': _syncTimeout.inMinutes,
      'maxRetries': _maxRetries,
      'statistics': Map.from(_syncStatistics),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// Obt√©m log de sincroniza√ß√£o
  List<String> getSyncLog({int limit = 50}) {
    return _syncLog.take(limit).toList();
  }
  
  /// Limpa log de sincroniza√ß√£o
  void clearSyncLog() {
    _syncLog.clear();
    _logSync('Log de sincroniza√ß√£o limpo');
  }
  
  /// Registra entrada no log de sincroniza√ß√£o
  void _logSync(String message) {
    final timestamp = DateTime.now().toIso8601String();
    final logEntry = '[$timestamp] $message';
    
    _syncLog.add(logEntry);
    
    // Manter apenas as √∫ltimas 100 entradas
    if (_syncLog.length > 100) {
      _syncLog.removeAt(0);
    }
    
    EnhancedLogger.info('üîÑ [SYNC_SERVICE] $message');
  }
  
  /// Para sincroniza√ß√£o em andamento
  void stopSync() {
    if (_isSyncing) {
      _logSync('üõë Parando sincroniza√ß√£o em andamento');
      _isSyncing = false;
    }
  }
  
  /// Finaliza servi√ßo de sincroniza√ß√£o
  void dispose() {
    try {
      _connectivitySubscription?.cancel();
      _syncTimer?.cancel();
      _usersToSync.clear();
      _syncLog.clear();
      _syncStatistics.clear();
      _isSyncing = false;
      _isInitialized = false;
      
      EnhancedLogger.info('üõë [SYNC_SERVICE] Servi√ßo finalizado');
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_SERVICE] Erro ao finalizar servi√ßo', error: e);
    }
  }
}