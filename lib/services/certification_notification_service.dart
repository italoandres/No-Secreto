import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

/// Servi√ßo de notifica√ß√µes para certifica√ß√£o espiritual
/// 
/// Este servi√ßo gerencia as notifica√ß√µes de certifica√ß√£o criadas pela Cloud Function.
/// Ele N√ÉO cria notifica√ß√µes (isso √© feito pela Cloud Function onCertificationStatusChange),
/// mas sim l√™, exibe e gerencia a navega√ß√£o quando o usu√°rio toca nas notifica√ß√µes.
class CertificationNotificationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Obter stream de notifica√ß√µes de certifica√ß√£o do usu√°rio
  /// 
  /// Retorna um stream com todas as notifica√ß√µes de certifica√ß√£o (aprovadas e reprovadas)
  /// ordenadas por data de cria√ß√£o (mais recentes primeiro).
  Stream<List<Map<String, dynamic>>> getCertificationNotifications(String userId) {
    return _firestore
        .collection('notifications')
        .where('userId', isEqualTo: userId)
        .where('type', whereIn: [
          'certification_approved',
          'certification_rejected',
        ])
        .orderBy('createdAt', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) {
          return snapshot.docs.map((doc) {
            final data = doc.data();
            data['id'] = doc.id; // Adicionar ID do documento
            return data;
          }).toList();
        });
  }

  /// Obter todas as notifica√ß√µes do usu√°rio (n√£o apenas certifica√ß√£o)
  /// 
  /// √ötil para exibir em uma lista geral de notifica√ß√µes
  Stream<List<Map<String, dynamic>>> getAllNotifications(String userId) {
    return _firestore
        .collection('notifications')
        .where('userId', isEqualTo: userId)
        .orderBy('createdAt', descending: true)
        .limit(100)
        .snapshots()
        .map((snapshot) {
          return snapshot.docs.map((doc) {
            final data = doc.data();
            data['id'] = doc.id;
            return data;
          }).toList();
        });
  }

  /// Obter contagem de notifica√ß√µes n√£o lidas de certifica√ß√£o
  Stream<int> getUnreadCertificationNotificationsCount(String userId) {
    return _firestore
        .collection('notifications')
        .where('userId', isEqualTo: userId)
        .where('type', whereIn: [
          'certification_approved',
          'certification_rejected',
        ])
        .where('read', isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  /// Obter contagem total de notifica√ß√µes n√£o lidas
  Stream<int> getUnreadNotificationsCount(String userId) {
    return _firestore
        .collection('notifications')
        .where('userId', isEqualTo: userId)
        .where('read', isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  /// Marcar notifica√ß√£o como lida
  Future<void> markAsRead(String notificationId) async {
    try {
      await _firestore
          .collection('notifications')
          .doc(notificationId)
          .update({
            'read': true,
            'readAt': FieldValue.serverTimestamp(),
          });
      
      print('‚úÖ Notifica√ß√£o $notificationId marcada como lida');
    } catch (e) {
      print('‚ùå Erro ao marcar notifica√ß√£o como lida: $e');
      rethrow;
    }
  }

  /// Marcar todas as notifica√ß√µes como lidas
  Future<void> markAllAsRead(String userId) async {
    try {
      final batch = _firestore.batch();
      
      final unreadNotifications = await _firestore
          .collection('notifications')
          .where('userId', isEqualTo: userId)
          .where('read', isEqualTo: false)
          .get();
      
      for (var doc in unreadNotifications.docs) {
        batch.update(doc.reference, {
          'read': true,
          'readAt': FieldValue.serverTimestamp(),
        });
      }
      
      await batch.commit();
      print('‚úÖ Todas as notifica√ß√µes marcadas como lidas');
    } catch (e) {
      print('‚ùå Erro ao marcar todas as notifica√ß√µes como lidas: $e');
      rethrow;
    }
  }

  /// Deletar notifica√ß√£o
  Future<void> deleteNotification(String notificationId) async {
    try {
      await _firestore
          .collection('notifications')
          .doc(notificationId)
          .delete();
      
      print('‚úÖ Notifica√ß√£o $notificationId deletada');
    } catch (e) {
      print('‚ùå Erro ao deletar notifica√ß√£o: $e');
      rethrow;
    }
  }

  /// Deletar todas as notifica√ß√µes lidas
  Future<void> deleteAllRead(String userId) async {
    try {
      final batch = _firestore.batch();
      
      final readNotifications = await _firestore
          .collection('notifications')
          .where('userId', isEqualTo: userId)
          .where('read', isEqualTo: true)
          .get();
      
      for (var doc in readNotifications.docs) {
        batch.delete(doc.reference);
      }
      
      await batch.commit();
      print('‚úÖ Todas as notifica√ß√µes lidas foram deletadas');
    } catch (e) {
      print('‚ùå Erro ao deletar notifica√ß√µes lidas: $e');
      rethrow;
    }
  }

  /// Lidar com o toque em uma notifica√ß√£o
  /// 
  /// Esta fun√ß√£o determina para onde navegar baseado no tipo de a√ß√£o da notifica√ß√£o.
  /// Tamb√©m marca a notifica√ß√£o como lida automaticamente.
  Future<void> handleNotificationTap(
    BuildContext context,
    Map<String, dynamic> notification,
  ) async {
    try {
      final notificationId = notification['id'] as String?;
      final actionType = notification['actionType'] as String?;
      final type = notification['type'] as String?;
      
      // Marcar como lida
      if (notificationId != null) {
        await markAsRead(notificationId);
      }
      
      // Navegar baseado no tipo de a√ß√£o
      if (actionType == 'view_profile') {
        // Certifica√ß√£o aprovada - navegar para o perfil
        print('üì± Navegando para o perfil');
        Get.toNamed('/profile');
      } else if (actionType == 'retry_certification') {
        // Certifica√ß√£o reprovada - navegar para tela de certifica√ß√£o
        print('üì± Navegando para tela de certifica√ß√£o');
        Get.toNamed('/spiritual-certification-request');
      } else if (type == 'certification_approved') {
        // Fallback para aprova√ß√£o
        Get.toNamed('/profile');
      } else if (type == 'certification_rejected') {
        // Fallback para reprova√ß√£o
        Get.toNamed('/spiritual-certification-request');
      } else {
        // Tipo desconhecido - apenas fechar
        print('‚ö†Ô∏è Tipo de notifica√ß√£o desconhecido: $type');
      }
    } catch (e) {
      print('‚ùå Erro ao lidar com toque na notifica√ß√£o: $e');
      
      // Mostrar snackbar de erro
      Get.snackbar(
        'Erro',
        'N√£o foi poss√≠vel abrir a notifica√ß√£o',
        backgroundColor: Colors.red,
        colorText: Colors.white,
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  /// Obter √≠cone apropriado para o tipo de notifica√ß√£o
  IconData getNotificationIcon(String type) {
    switch (type) {
      case 'certification_approved':
        return Icons.verified;
      case 'certification_rejected':
        return Icons.info_outline;
      default:
        return Icons.notifications;
    }
  }

  /// Obter cor apropriada para o tipo de notifica√ß√£o
  Color getNotificationColor(String type) {
    switch (type) {
      case 'certification_approved':
        return Colors.green;
      case 'certification_rejected':
        return Colors.orange;
      default:
        return Colors.blue;
    }
  }

  /// Verificar se o usu√°rio tem notifica√ß√µes n√£o lidas
  Future<bool> hasUnreadNotifications(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('notifications')
          .where('userId', isEqualTo: userId)
          .where('read', isEqualTo: false)
          .limit(1)
          .get();
      
      return snapshot.docs.isNotEmpty;
    } catch (e) {
      print('‚ùå Erro ao verificar notifica√ß√µes n√£o lidas: $e');
      return false;
    }
  }

  /// Obter a notifica√ß√£o mais recente de certifica√ß√£o
  Future<Map<String, dynamic>?> getLatestCertificationNotification(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('notifications')
          .where('userId', isEqualTo: userId)
          .where('type', whereIn: [
            'certification_approved',
            'certification_rejected',
          ])
          .orderBy('createdAt', descending: true)
          .limit(1)
          .get();
      
      if (snapshot.docs.isEmpty) {
        return null;
      }
      
      final data = snapshot.docs.first.data();
      data['id'] = snapshot.docs.first.id;
      return data;
    } catch (e) {
      print('‚ùå Erro ao obter √∫ltima notifica√ß√£o de certifica√ß√£o: $e');
      return null;
    }
  }
}
