import 'dart:async';
import '../models/real_notification_model.dart';
import '../repositories/single_source_notification_repository.dart';
import '../services/unified_notification_cache.dart';
import '../utils/enhanced_logger.dart';

/// Gerenciador inteligente de streams com invalida√ß√£o autom√°tica
class IntelligentStreamManager {
  static final IntelligentStreamManager _instance = IntelligentStreamManager._internal();
  factory IntelligentStreamManager() => _instance;
  IntelligentStreamManager._internal();

  final SingleSourceNotificationRepository _repository = SingleSourceNotificationRepository();
  final UnifiedNotificationCache _cache = UnifiedNotificationCache();
  
  final Map<String, StreamController<List<RealNotificationModel>>> _controllers = {};
  final Map<String, StreamSubscription> _subscriptions = {};
  final Map<String, Timer> _invalidationTimers = {};
  final Map<String, DateTime> _lastActivity = {};

  /// Obt√©m stream inteligente com invalida√ß√£o autom√°tica
  Stream<List<RealNotificationModel>> getIntelligentStream(String userId) {
    EnhancedLogger.log('üß† [INTELLIGENT] Obtendo stream inteligente para: $userId');
    
    if (!_controllers.containsKey(userId)) {
      _controllers[userId] = StreamController<List<RealNotificationModel>>.broadcast();
      _setupIntelligentStream(userId);
    }
    
    _updateActivity(userId);
    return _controllers[userId]!.stream;
  }

  /// Configura stream inteligente
  void _setupIntelligentStream(String userId) {
    EnhancedLogger.log('‚öôÔ∏è [INTELLIGENT] Configurando stream inteligente para: $userId');
    
    // Cancela subscription anterior
    _subscriptions[userId]?.cancel();
    
    // Envia dados do cache imediatamente se dispon√≠veis
    _sendCachedDataIfAvailable(userId);
    
    // Configura subscription do reposit√≥rio
    _subscriptions[userId] = _repository
        .watchNotifications(userId)
        .listen(
          (notifications) => _handleStreamUpdate(userId, notifications),
          onError: (error) => _handleStreamError(userId, error),
        );
    
    // Configura invalida√ß√£o inteligente
    _setupIntelligentInvalidation(userId);
  }

  /// Envia dados do cache se dispon√≠veis
  void _sendCachedDataIfAvailable(String userId) {
    final cachedData = _cache.getCachedNotifications(userId);
    if (cachedData != null) {
      _controllers[userId]?.add(cachedData);
      EnhancedLogger.log('‚ö° [INTELLIGENT] Dados do cache enviados: ${cachedData.length} notifica√ß√µes');
    }
  }

  /// Processa atualiza√ß√£o do stream
  void _handleStreamUpdate(String userId, List<RealNotificationModel> notifications) {
    EnhancedLogger.log('üì® [INTELLIGENT] Atualiza√ß√£o recebida: ${notifications.length} notifica√ß√µes');
    
    // Verifica se houve mudan√ßas significativas
    final cachedData = _cache.getCachedNotifications(userId) ?? [];
    
    if (_hasSignificantChanges(cachedData, notifications)) {
      EnhancedLogger.log('üîÑ [INTELLIGENT] Mudan√ßas significativas detectadas');
      
      // Atualiza cache
      _cache.updateCache(userId, notifications);
      
      // Envia para stream
      _controllers[userId]?.add(notifications);
      
      // Reseta timer de invalida√ß√£o
      _resetInvalidationTimer(userId);
    } else {
      EnhancedLogger.log('üìä [INTELLIGENT] Nenhuma mudan√ßa significativa detectada');
    }
    
    _updateActivity(userId);
  }

  /// Processa erro do stream
  void _handleStreamError(String userId, dynamic error) {
    EnhancedLogger.log('‚ùå [INTELLIGENT] Erro no stream: $error');
    
    _controllers[userId]?.addError(error);
    
    // Tenta recupera√ß√£o autom√°tica
    _attemptAutoRecovery(userId);
  }

  /// Verifica se h√° mudan√ßas significativas
  bool _hasSignificantChanges(
    List<RealNotificationModel> cached,
    List<RealNotificationModel> fresh,
  ) {
    // Diferentes quantidades
    if (cached.length != fresh.length) return true;
    
    // Verifica mudan√ßas nos IDs ou contagens
    for (int i = 0; i < cached.length; i++) {
      if (cached[i].id != fresh[i].id ||
          cached[i].count != fresh[i].count ||
          cached[i].timestamp != fresh[i].timestamp) {
        return true;
      }
    }
    
    return false;
  }

  /// Configura invalida√ß√£o inteligente
  void _setupIntelligentInvalidation(String userId) {
    _resetInvalidationTimer(userId);
  }

  /// Reseta timer de invalida√ß√£o
  void _resetInvalidationTimer(String userId) {
    _invalidationTimers[userId]?.cancel();
    
    _invalidationTimers[userId] = Timer(const Duration(minutes: 10), () {
      _performIntelligentInvalidation(userId);
    });
  }

  /// Executa invalida√ß√£o inteligente
  Future<void> _performIntelligentInvalidation(String userId) async {
    EnhancedLogger.log('üß† [INTELLIGENT] Executando invalida√ß√£o inteligente para: $userId');
    
    try {
      // Verifica se o usu√°rio ainda est√° ativo
      if (!_isUserActive(userId)) {
        EnhancedLogger.log('üò¥ [INTELLIGENT] Usu√°rio inativo, pulando invalida√ß√£o');
        return;
      }
      
      // For√ßa refresh do reposit√≥rio
      await _repository.forceRefresh(userId);
      
      EnhancedLogger.log('‚úÖ [INTELLIGENT] Invalida√ß√£o inteligente conclu√≠da');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [INTELLIGENT] Erro na invalida√ß√£o inteligente: $e');
    }
  }

  /// Verifica se usu√°rio est√° ativo
  bool _isUserActive(String userId) {
    final lastActivity = _lastActivity[userId];
    if (lastActivity == null) return false;
    
    return DateTime.now().difference(lastActivity).inMinutes < 30;
  }

  /// Atualiza atividade do usu√°rio
  void _updateActivity(String userId) {
    _lastActivity[userId] = DateTime.now();
  }

  /// Tenta recupera√ß√£o autom√°tica
  Future<void> _attemptAutoRecovery(String userId) async {
    EnhancedLogger.log('üîß [INTELLIGENT] Tentando recupera√ß√£o autom√°tica para: $userId');
    
    try {
      // Aguarda um pouco antes de tentar
      await Future.delayed(const Duration(seconds: 2));
      
      // Reconfigura stream
      _setupIntelligentStream(userId);
      
      EnhancedLogger.log('‚úÖ [INTELLIGENT] Recupera√ß√£o autom√°tica conclu√≠da');
      
    } catch (e) {
      EnhancedLogger.log('‚ùå [INTELLIGENT] Falha na recupera√ß√£o autom√°tica: $e');
    }
  }

  /// For√ßa invalida√ß√£o imediata
  Future<void> forceInvalidation(String userId) async {
    EnhancedLogger.log('üöÄ [INTELLIGENT] For√ßando invalida√ß√£o para: $userId');
    
    await _repository.forceRefresh(userId);
    _resetInvalidationTimer(userId);
  }

  /// Pausa stream para um usu√°rio
  void pauseStream(String userId) {
    EnhancedLogger.log('‚è∏Ô∏è [INTELLIGENT] Pausando stream para: $userId');
    
    _subscriptions[userId]?.pause();
    _invalidationTimers[userId]?.cancel();
  }

  /// Resume stream para um usu√°rio
  void resumeStream(String userId) {
    EnhancedLogger.log('‚ñ∂Ô∏è [INTELLIGENT] Resumindo stream para: $userId');
    
    _subscriptions[userId]?.resume();
    _resetInvalidationTimer(userId);
    _updateActivity(userId);
  }

  /// Obt√©m estat√≠sticas do gerenciador
  Map<String, dynamic> getManagerStats() {
    return {
      'activeStreams': _controllers.length,
      'activeSubscriptions': _subscriptions.length,
      'activeTimers': _invalidationTimers.length,
      'activeUsers': _lastActivity.length,
      'repository': _repository.getRepositoryStats(),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }

  /// Limpa recursos para um usu√°rio
  void disposeUser(String userId) {
    EnhancedLogger.log('üßπ [INTELLIGENT] Limpando recursos para: $userId');
    
    _subscriptions[userId]?.cancel();
    _subscriptions.remove(userId);
    
    _controllers[userId]?.close();
    _controllers.remove(userId);
    
    _invalidationTimers[userId]?.cancel();
    _invalidationTimers.remove(userId);
    
    _lastActivity.remove(userId);
    
    _repository.disposeUser(userId);
  }

  /// Limpa todos os recursos
  void dispose() {
    EnhancedLogger.log('üßπ [INTELLIGENT] Limpando todos os recursos');
    
    for (final subscription in _subscriptions.values) {
      subscription.cancel();
    }
    _subscriptions.clear();
    
    for (final controller in _controllers.values) {
      controller.close();
    }
    _controllers.clear();
    
    for (final timer in _invalidationTimers.values) {
      timer.cancel();
    }
    _invalidationTimers.clear();
    
    _lastActivity.clear();
    
    _repository.dispose();
  }
}