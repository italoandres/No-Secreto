import 'dart:async';
import 'package:get/get.dart';
import '../models/real_notification_model.dart';
import '../utils/enhanced_logger.dart';
import '../controllers/matches_controller.dart';

/// Gerenciador de sincroniza√ß√£o em tempo real
class RealTimeSyncManager {
  static RealTimeSyncManager? _instance;
  static RealTimeSyncManager get instance => 
      _instance ??= RealTimeSyncManager._();
  
  RealTimeSyncManager._();
  
  Timer? _debounceTimer;
  Timer? _syncTimer;
  List<RealNotification> _lastSyncedData = [];
  DateTime? _lastSyncTime;
  bool _isInitialized = false;
  
  // Configura√ß√µes de sincroniza√ß√£o
  final Duration _debounceDelay = const Duration(milliseconds: 500);
  final Duration _syncInterval = const Duration(seconds: 2);
  final Duration _maxSyncAge = const Duration(minutes: 1);
  
  /// Inicializa o gerenciador de sincroniza√ß√£o
  void initialize() {
    if (_isInitialized) return;
    
    try {
      _setupPeriodicSync();
      _isInitialized = true;
      
      EnhancedLogger.success('‚úÖ [SYNC_MANAGER] Sistema inicializado com sucesso');
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao inicializar sistema', 
        error: e
      );
    }
  }
  
  /// Configura sincroniza√ß√£o peri√≥dica
  void _setupPeriodicSync() {
    _syncTimer = Timer.periodic(_syncInterval, (timer) {
      _performPeriodicSync();
    });
    
    EnhancedLogger.info('‚è∞ [SYNC_MANAGER] Sincroniza√ß√£o peri√≥dica configurada', 
      data: {'intervalSeconds': _syncInterval.inSeconds}
    );
  }
  
  /// Sincroniza notifica√ß√µes com a UI de forma inteligente
  void syncNotificationsWithUI(List<RealNotification> notifications) {
    try {
      EnhancedLogger.info('üîÑ [SYNC_MANAGER] Iniciando sincroniza√ß√£o com UI', 
        tag: 'REAL_TIME_SYNC_MANAGER',
        data: {
          'newNotificationsCount': notifications.length,
          'lastSyncedCount': _lastSyncedData.length,
          'timestamp': DateTime.now().toIso8601String()
        }
      );
      
      // Verifica se h√° mudan√ßas nos dados
      if (!hasDataChanged(notifications)) {
        EnhancedLogger.info('‚ö° [SYNC_MANAGER] Dados inalterados - sync ignorado', 
          data: {'notificationCount': notifications.length}
        );
        return;
      }
      
      // Cancela timer anterior se existir
      _debounceTimer?.cancel();
      
      // Agenda atualiza√ß√£o com debouncing
      _debounceTimer = Timer(_debounceDelay, () {
        _executeSyncWithUI(notifications);
      });
      
      EnhancedLogger.info('‚è≥ [SYNC_MANAGER] Sync agendado com debouncing', 
        data: {
          'delayMs': _debounceDelay.inMilliseconds,
          'notificationCount': notifications.length
        }
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro na sincroniza√ß√£o', 
        error: e,
        data: {'notificationCount': notifications.length}
      );
    }
  }
  
  /// Executa sincroniza√ß√£o efetiva com a UI
  void _executeSyncWithUI(List<RealNotification> notifications) {
    try {
      EnhancedLogger.info('üöÄ [SYNC_MANAGER] Executando sincroniza√ß√£o efetiva', 
        data: {
          'notificationCount': notifications.length,
          'timestamp': DateTime.now().toIso8601String()
        }
      );
      
      // Obt√©m controller do GetX
      final controller = _getMatchesController();
      if (controller == null) {
        EnhancedLogger.error('‚ùå [SYNC_MANAGER] Controller n√£o encontrado');
        return;
      }
      
      // Atualiza dados no controller
      _updateControllerData(controller, notifications);
      
      // For√ßa atualiza√ß√£o da UI
      _forceUIUpdate(controller);
      
      // Registra sincroniza√ß√£o bem-sucedida
      _recordSuccessfulSync(notifications);
      
      EnhancedLogger.success('‚úÖ [SYNC_MANAGER] Sincroniza√ß√£o conclu√≠da com sucesso', 
        data: {
          'syncedNotifications': notifications.length,
          'controllerUpdated': true,
          'uiForceUpdated': true
        }
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro na execu√ß√£o da sincroniza√ß√£o', 
        error: e,
        data: {'notificationCount': notifications.length}
      );
    }
  }
  
  /// Obt√©m o controller de matches
  MatchesController? _getMatchesController() {
    try {
      if (Get.isRegistered<MatchesController>()) {
        return Get.find<MatchesController>();
      } else {
        EnhancedLogger.warning('‚ö†Ô∏è [SYNC_MANAGER] MatchesController n√£o registrado');
        return null;
      }
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao obter controller', 
        error: e
      );
      return null;
    }
  }
  
  /// Atualiza dados no controller
  void _updateControllerData(MatchesController controller, List<RealNotification> notifications) {
    try {
      // Atualiza lista de notifica√ß√µes reais
      controller.realNotifications.value = notifications;
      
      // Atualiza flag de novas notifica√ß√µes
      controller.hasNewNotifications.value = notifications.isNotEmpty;
      
      // Atualiza contador de notifica√ß√µes
      controller.notificationCount.value = notifications.length;
      
      // Limpa erro se houver
      controller.notificationError.value = '';
      
      // Atualiza timestamp da √∫ltima atualiza√ß√£o
      controller.lastNotificationUpdate.value = DateTime.now();
      
      EnhancedLogger.info('üìä [SYNC_MANAGER] Dados do controller atualizados', 
        data: {
          'realNotifications': notifications.length,
          'hasNewNotifications': notifications.isNotEmpty,
          'notificationCount': notifications.length,
          'errorCleared': true
        }
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao atualizar controller', 
        error: e
      );
    }
  }
  
  /// For√ßa atualiza√ß√£o da UI
  void _forceUIUpdate(MatchesController controller) {
    try {
      // For√ßa refresh dos observables
      controller.realNotifications.refresh();
      controller.hasNewNotifications.refresh();
      controller.notificationCount.refresh();
      
      // For√ßa update do controller
      controller.update();
      
      // For√ßa refresh geral
      controller.refresh();
      
      EnhancedLogger.info('üîÑ [SYNC_MANAGER] UI for√ßada a atualizar', 
        data: {
          'observablesRefreshed': true,
          'controllerUpdated': true,
          'generalRefresh': true
        }
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao for√ßar atualiza√ß√£o da UI', 
        error: e
      );
    }
  }
  
  /// Registra sincroniza√ß√£o bem-sucedida
  void _recordSuccessfulSync(List<RealNotification> notifications) {
    _lastSyncedData = List.from(notifications);
    _lastSyncTime = DateTime.now();
    
    EnhancedLogger.info('üìù [SYNC_MANAGER] Sincroniza√ß√£o registrada', 
      data: {
        'syncTime': _lastSyncTime!.toIso8601String(),
        'dataCount': _lastSyncedData.length
      }
    );
  }
  
  /// Agenda atualiza√ß√£o da UI com delay espec√≠fico
  void scheduleUIUpdate(Duration delay) {
    try {
      _debounceTimer?.cancel();
      
      _debounceTimer = Timer(delay, () {
        final controller = _getMatchesController();
        if (controller != null) {
          _forceUIUpdate(controller);
          
          EnhancedLogger.info('‚è∞ [SYNC_MANAGER] Atualiza√ß√£o agendada executada', 
            data: {
              'delayMs': delay.inMilliseconds,
              'timestamp': DateTime.now().toIso8601String()
            }
          );
        }
      });
      
      EnhancedLogger.info('üìÖ [SYNC_MANAGER] Atualiza√ß√£o da UI agendada', 
        data: {'delayMs': delay.inMilliseconds}
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao agendar atualiza√ß√£o', 
        error: e
      );
    }
  }
  
  /// Verifica se os dados mudaram desde a √∫ltima sincroniza√ß√£o
  bool hasDataChanged(List<RealNotification> newData) {
    try {
      // Se n√£o h√° dados anteriores, considera como mudan√ßa
      if (_lastSyncedData.isEmpty && newData.isNotEmpty) {
        return true;
      }
      
      // Se tamanhos diferentes, houve mudan√ßa
      if (_lastSyncedData.length != newData.length) {
        EnhancedLogger.info('üìä [SYNC_MANAGER] Mudan√ßa detectada - tamanho diferente', 
          data: {
            'previousCount': _lastSyncedData.length,
            'newCount': newData.length
          }
        );
        return true;
      }
      
      // Verifica mudan√ßas nos IDs das notifica√ß√µes
      final previousIds = _lastSyncedData.map((n) => n.id).toSet();
      final newIds = newData.map((n) => n.id).toSet();
      
      if (!previousIds.containsAll(newIds) || !newIds.containsAll(previousIds)) {
        EnhancedLogger.info('üìä [SYNC_MANAGER] Mudan√ßa detectada - IDs diferentes', 
          data: {
            'previousIds': previousIds.length,
            'newIds': newIds.length,
            'difference': newIds.difference(previousIds).toList()
          }
        );
        return true;
      }
      
      // Verifica mudan√ßas nos timestamps (notifica√ß√µes atualizadas)
      for (int i = 0; i < newData.length; i++) {
        final previous = _lastSyncedData.firstWhereOrNull((n) => n.id == newData[i].id);
        if (previous != null && previous.timestamp != newData[i].timestamp) {
          EnhancedLogger.info('üìä [SYNC_MANAGER] Mudan√ßa detectada - timestamp atualizado', 
            data: {
              'notificationId': newData[i].id,
              'previousTimestamp': previous.timestamp.toIso8601String(),
              'newTimestamp': newData[i].timestamp.toIso8601String()
            }
          );
          return true;
        }
      }
      
      return false;
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao verificar mudan√ßas', 
        error: e
      );
      // Em caso de erro, assume que houve mudan√ßa para garantir atualiza√ß√£o
      return true;
    }
  }
  
  /// Atualiza UI de forma incremental
  void updateUIIncrementally(List<RealNotification> changes) {
    try {
      EnhancedLogger.info('üîÑ [SYNC_MANAGER] Atualiza√ß√£o incremental iniciada', 
        data: {'changesCount': changes.length}
      );
      
      final controller = _getMatchesController();
      if (controller == null) return;
      
      // Aplica mudan√ßas incrementais
      for (final change in changes) {
        _applyIncrementalChange(controller, change);
      }
      
      // For√ßa refresh apenas dos observables afetados
      controller.realNotifications.refresh();
      controller.hasNewNotifications.refresh();
      
      EnhancedLogger.success('‚úÖ [SYNC_MANAGER] Atualiza√ß√£o incremental conclu√≠da', 
        data: {'appliedChanges': changes.length}
      );
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro na atualiza√ß√£o incremental', 
        error: e
      );
    }
  }
  
  /// Aplica uma mudan√ßa incremental espec√≠fica
  void _applyIncrementalChange(MatchesController controller, RealNotification change) {
    try {
      final currentNotifications = controller.realNotifications.value;
      final existingIndex = currentNotifications.indexWhere((n) => n.id == change.id);
      
      if (existingIndex >= 0) {
        // Atualiza notifica√ß√£o existente
        currentNotifications[existingIndex] = change;
        EnhancedLogger.info('üîÑ [SYNC_MANAGER] Notifica√ß√£o atualizada', 
          data: {'notificationId': change.id}
        );
      } else {
        // Adiciona nova notifica√ß√£o
        currentNotifications.insert(0, change); // Adiciona no in√≠cio
        EnhancedLogger.info('‚ûï [SYNC_MANAGER] Nova notifica√ß√£o adicionada', 
          data: {'notificationId': change.id}
        );
      }
      
      // Atualiza contador
      controller.notificationCount.value = currentNotifications.length;
      controller.hasNewNotifications.value = currentNotifications.isNotEmpty;
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro ao aplicar mudan√ßa incremental', 
        error: e,
        data: {'changeId': change.id}
      );
    }
  }
  
  /// Executa sincroniza√ß√£o peri√≥dica
  void _performPeriodicSync() {
    try {
      // Verifica se a √∫ltima sincroniza√ß√£o n√£o √© muito antiga
      if (_lastSyncTime != null) {
        final age = DateTime.now().difference(_lastSyncTime!);
        if (age < _maxSyncAge) {
          return; // Sincroniza√ß√£o recente, n√£o precisa fazer nada
        }
      }
      
      EnhancedLogger.info('‚è∞ [SYNC_MANAGER] Executando sincroniza√ß√£o peri√≥dica');
      
      final controller = _getMatchesController();
      if (controller != null) {
        // For√ßa refresh dos dados
        _forceUIUpdate(controller);
        
        // Atualiza timestamp
        _lastSyncTime = DateTime.now();
      }
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro na sincroniza√ß√£o peri√≥dica', 
        error: e
      );
    }
  }
  
  /// For√ßa sincroniza√ß√£o imediata
  void forceSyncNow() {
    try {
      EnhancedLogger.info('‚ö° [SYNC_MANAGER] Sincroniza√ß√£o for√ßada iniciada');
      
      _debounceTimer?.cancel();
      
      final controller = _getMatchesController();
      if (controller != null) {
        _forceUIUpdate(controller);
        _lastSyncTime = DateTime.now();
        
        EnhancedLogger.success('‚úÖ [SYNC_MANAGER] Sincroniza√ß√£o for√ßada conclu√≠da');
      }
      
    } catch (e) {
      EnhancedLogger.error('‚ùå [SYNC_MANAGER] Erro na sincroniza√ß√£o for√ßada', 
        error: e
      );
    }
  }
  
  /// Obt√©m estat√≠sticas de sincroniza√ß√£o
  Map<String, dynamic> getSyncStatistics() {
    return {
      'isInitialized': _isInitialized,
      'lastSyncTime': _lastSyncTime?.toIso8601String(),
      'lastSyncedDataCount': _lastSyncedData.length,
      'debounceDelayMs': _debounceDelay.inMilliseconds,
      'syncIntervalSeconds': _syncInterval.inSeconds,
      'maxSyncAgeMinutes': _maxSyncAge.inMinutes,
      'hasActiveDebounceTimer': _debounceTimer?.isActive ?? false,
      'hasActiveSyncTimer': _syncTimer?.isActive ?? false,
      'timeSinceLastSync': _lastSyncTime != null 
          ? DateTime.now().difference(_lastSyncTime!).inSeconds
          : null,
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// Para o gerenciador de sincroniza√ß√£o
  void dispose() {
    _debounceTimer?.cancel();
    _syncTimer?.cancel();
    _debounceTimer = null;
    _syncTimer = null;
    _lastSyncedData.clear();
    _lastSyncTime = null;
    _isInitialized = false;
    
    EnhancedLogger.info('üõë [SYNC_MANAGER] Sistema finalizado');
  }
}